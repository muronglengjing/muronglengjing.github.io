<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>来做个课程表吧（一）</title>
    <link href="/2020/02/20/do-a-classbook-1/"/>
    <url>/2020/02/20/do-a-classbook-1/</url>
    
    <content type="html"><![CDATA[<p>手机端的课程表种类繁多，但电脑端的课程表种类却很少，也不支持自动导课。既然这样就让我们来造轮子吧。</p><p>[toc]</p><h2 id="获取课程表"><a href="#获取课程表" class="headerlink" title="获取课程表"></a>获取课程表</h2><p>首先我们先去获取课程表。登录教务，点击 <strong>学生课表查询</strong>，进入课表界面，按<strong>F12</strong>，导航到 <strong>Network</strong>，按下 <strong>ctrl</strong>+ <strong>r</strong>刷新界面，界面更新后，下面出现了几个文件，让我们一个个查看。</p><img src="https://img-blog.csdnimg.cn/20200220142854836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113238781" style="zoom:50%;" /><p>接下来点击 <strong>Preview</strong>，当我们找到第三个的时候我们可以发现里面包含了课程名、时间等，正好是我们需要的内容。</p><img src="https://img-blog.csdnimg.cn/20200220142943160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113418598" style="zoom:50%;" /><p>接下来我们用右键选择 <strong>Copy response</strong>，然后这个JSON就保存到我们的粘贴板上了。</p><img src="https://img-blog.csdnimg.cn/20200220143013947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113524084" style="zoom:50%;" /><h1 id="制作课程表"><a href="#制作课程表" class="headerlink" title="制作课程表"></a>制作课程表</h1><h2 id="读取JSON数据"><a href="#读取JSON数据" class="headerlink" title="读取JSON数据"></a>读取JSON数据</h2><p>接下来我们使用python来制作课程表</p><p>首先导入json包，然后导入刚才粘贴的数据，然后把它打印出来</p><pre><code class="python"># -*- coding:GBK -*-         # 文件编码import jsonclass_js = &#39;&#39;&#39;[复制刚才的粘贴内容在这里]&#39;&#39;&#39;js = json.loads(class_js)  # 转化为jsonprint(js)</code></pre><p>输出结果是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200220143115350.png" srcset="/img/loading.gif" alt="image-20200220114157479"></p><p>结果是我们要的数据</p><h2 id="获取课程"><a href="#获取课程" class="headerlink" title="获取课程"></a>获取课程</h2><p>我们可以看到课程数据保存在<strong>kbList</strong>这个值里，我们只用把这个值下面的数据全部取出来。</p><img src="https://img-blog.csdnimg.cn/20200220143137591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220114520679" style="zoom: 67%;" /><p>他的键值对是这样的</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>kcmc</td><td>课程名</td></tr><tr><td>xm</td><td>讲师</td></tr><tr><td>zcd</td><td>周数</td></tr><tr><td>jcor</td><td>节数</td></tr><tr><td>xqjmc</td><td>星期</td></tr><tr><td>cdmc</td><td>地点</td></tr></tbody></table><p>接下来我们把需要的数据输出一下</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;课程名:\n{}\n讲师:{}\n节:{}\n周:{}&quot;.format(        course[&quot;kcmc&quot;], course[&quot;xm&quot;], course[&quot;zcd&quot;], course[&quot;jcor&quot;])    print(scr)</code></pre><p>打印的结果是这样的：</p><img src="https://img-blog.csdnimg.cn/2020022014315311.png" srcset="/img/loading.gif" alt="image-20200220114817546" style="zoom: 67%;" /><h2 id="格式化课程表"><a href="#格式化课程表" class="headerlink" title="格式化课程表"></a>格式化课程表</h2><p>这样我们就完成了课程表的制作，但这是不完善的。</p><p>比如竖着一排看起来很麻烦，而且找课程也不方便，接下来我们来给课程表添加一个界面。</p><p>我们挑选tkinter来给完成这个界面。</p><h3 id="创建窗体"><a href="#创建窗体" class="headerlink" title="创建窗体"></a>创建窗体</h3><p>首先我们要<strong>导入tkinter</strong>，并<strong>创建一个窗体</strong>。</p><pre><code class="python">from tkinter import *top = Tk()  # 创建一个窗体top.geometry(&quot;1100x400+200+50&quot;) # 改变窗体的大小top.mainloop()  # 进入消息循环</code></pre><p>显示效果为</p><img src="https://img-blog.csdnimg.cn/20200220143210110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220135607560" style="zoom:50%;" /><h3 id="显示课程"><a href="#显示课程" class="headerlink" title="显示课程"></a>显示课程</h3><p>我们根据星期几来放置课程，星期一一列星期二一列。</p><p>首先我们要创建一个列表来记录星期的数据，再创建一个字典来保存当前天有几节课。</p><pre><code class="python">week = [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;]y = {}</code></pre><p>接下来我们把为每个课程数据创建一个文本控件，并把文本放在里面。</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;课程名:\n{}\n讲师:{}\n节:{}\n周:{}&quot;.format(        course[&quot;kcmc&quot;], course[&quot;xm&quot;], course[&quot;zcd&quot;], course[&quot;jcor&quot;])    print(scr)    # 确认文本的位置    x = week.index(course[&quot;xqjmc&quot;])    if course[&quot;xqjmc&quot;] in y:        y[course[&quot;xqjmc&quot;]] = y[course[&quot;xqjmc&quot;]] + 1    else:        y[course[&quot;xqjmc&quot;]] = 0    text = Text(top, width=30, height=5)  # 创建一个文本控件    text.place(x=x * 215 + 10, y=y[course[&quot;xqjmc&quot;]] * 70 + 20)  # 在屏幕上放置文本控件    text.insert(INSERT, scr)  # 在控件上放置文本</code></pre><p>通过x保存星期的天数，并格式化为0~7，用y保存一天有几节课。</p><p>最后进入消息循环：</p><pre><code class="python">top.mainloop()  # 进入消息循环</code></pre><p>运行的结果是：</p><img src="https://img-blog.csdnimg.cn/20200220143231624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom:50%;" /><p>当然，这样的结果并不能让我们满意。我们希望能够根据当前所在的周数显示课程。而且这个界面也太丑了，还不如直接下载课程来的方便。下面让我们来改进课程表。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程表</tag>
      
      <tag>tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从OpenCv到照片调色</title>
    <link href="/2020/02/19/%E4%BB%8EOpenCv%E5%88%B0%E7%85%A7%E7%89%87%E8%B0%83%E8%89%B2/"/>
    <url>/2020/02/19/%E4%BB%8EOpenCv%E5%88%B0%E7%85%A7%E7%89%87%E8%B0%83%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCv"><a href="#OpenCv" class="headerlink" title="OpenCv"></a>OpenCv</h1><h3 id="什么是opencv？"><a href="#什么是opencv？" class="headerlink" title="什么是opencv？"></a>什么是opencv？</h3><p>opencv是一个跨平台的计算机视觉库，由一系列函数构成，可以对照片进行一系列操作。</p><h2 id="颜色模型"><a href="#颜色模型" class="headerlink" title="颜色模型"></a>颜色模型</h2><h3 id="RGB模型"><a href="#RGB模型" class="headerlink" title="RGB模型"></a>RGB模型</h3><p>RGB模型是指图片由三个通道 <strong>红色（red）</strong>、 <strong>绿色（green）</strong>、和 <strong>蓝色（blue）</strong>构成</p><p>，每个值从0到255构成，0代表无，255代表最大值，</p><h3 id="CMKY模型"><a href="#CMKY模型" class="headerlink" title="CMKY模型"></a>CMKY模型</h3><h3 id="HSI颜色模型"><a href="#HSI颜色模型" class="headerlink" title="HSI颜色模型"></a>HSI颜色模型</h3>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2020/02/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/"/>
    <url>/2020/02/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><pre><code class="bash">git init</code></pre><h3 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h3><pre><code class="bash">git add [文件名]</code></pre><h3 id="提交修改到版本库"><a href="#提交修改到版本库" class="headerlink" title="提交修改到版本库"></a>提交修改到版本库</h3><pre><code class="bash">git commit -m [文本内容]</code></pre><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><pre><code class="bash">git log</code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><pre><code class="bash">git reset --hard HEAD~[版本个数]</code></pre><h3 id="查看操作的内容"><a href="#查看操作的内容" class="headerlink" title="查看操作的内容"></a>查看操作的内容</h3><pre><code class="bash">git reflog</code></pre><h3 id="查看缓存区与工作区的工作状态"><a href="#查看缓存区与工作区的工作状态" class="headerlink" title="查看缓存区与工作区的工作状态"></a>查看缓存区与工作区的工作状态</h3><pre><code class="bash">git status</code></pre><h3 id="丢弃缓存区"><a href="#丢弃缓存区" class="headerlink" title="丢弃缓存区"></a>丢弃缓存区</h3><pre><code class="bash">git checkout -- [文件名]</code></pre><h3 id="删除工作区文件"><a href="#删除工作区文件" class="headerlink" title="删除工作区文件"></a>删除工作区文件</h3><pre><code class="bash">git rm [文件名]</code></pre><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><pre><code class="bash">git branch</code></pre><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><pre><code class="bash">git branch [分支名]</code></pre><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><pre><code class="bash">git switch [分支名]</code></pre><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><pre><code class="bash">git merge [分支名]</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><pre><code class="bash">git branch -d [分支名]</code></pre><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><pre><code class="bash">git tag</code></pre><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><pre><code class="bash">git tag [标签名]</code></pre><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><pre><code class="bash">git tag -d [标签名]</code></pre><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><pre><code class="bash">git remote add origin [Git的ssh地址]</code></pre><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><pre><code class="bash">git push -u origin master</code></pre><h3 id="推送更新到远程仓库"><a href="#推送更新到远程仓库" class="headerlink" title="推送更新到远程仓库"></a>推送更新到远程仓库</h3><pre><code class="bash">git push origin master</code></pre><h3 id="强制推送到远程仓库"><a href="#强制推送到远程仓库" class="headerlink" title="强制推送到远程仓库"></a>强制推送到远程仓库</h3><pre><code class="bash">git push origin master -f</code></pre><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><pre><code class="bash">git remote</code></pre><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><pre><code class="bash">git remote rm [仓库名]</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来搭建属于你的博客吧</title>
    <link href="/2020/02/17/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/"/>
    <url>/2020/02/17/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>要想搭建一个属于自己的博客平台，你需要</p><ul><li>一个Github账号和Gitee账号（搭建免费的服务平台）</li><li>一台电脑（保存你的博客）</li><li>一个图床（保存图片）</li></ul><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>具体安装过程可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></p><h2 id="同步Github"><a href="#同步Github" class="headerlink" title="同步Github"></a>同步Github</h2><p>首先我们要在Github创建一个<strong>仓库</strong>，仓库的名字的格式应该是<strong>你的用户名.github.io</strong>，记下仓库的地址http的地址，然后我们修改 <em>_config.yml</em>文件，在最后一行的改成</p><pre><code class="yaml">deploy:  type: git  repository: [你的仓库地址]  branch: master</code></pre><p>再根据<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">hexo官方文档</a>的指引，增加 <em>.travis.yml</em>文件.</p><p>然后在控制台输入以下命令</p><pre><code class="bash">npm install hexo-deployer-git</code></pre><h2 id="同步码云"><a href="#同步码云" class="headerlink" title="同步码云"></a>同步码云</h2><p>在码云里，新建一个 <strong>仓库</strong>，名字要与你的<strong>用户名</strong>相同<br>点击<strong>管理</strong>，填入<strong>仓库远程地址</strong>，点击<strong>保存</strong> 。</p><p>找到 <strong>服务</strong>，点击 <strong>Gitee Pages</strong>，开启服务。</p><h1 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h1><h2 id="创建一篇新博客"><a href="#创建一篇新博客" class="headerlink" title="创建一篇新博客"></a>创建一篇新博客</h2><p>在Git bash中输入</p><pre><code class="bash">hexo n [文章的标题]</code></pre><p>如果标题中带空格则需要用英文的双引号括起。</p><p>接着在当前目录下可以找到 <strong>source\_posts</strong> 的有个 <strong>[标题].md</strong>的文件，可以用记事本直接进入修改。</p><p>在文件的前几行有这样几条数据</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>title</td><td>[标题]</td></tr><tr><td>date</td><td>[发布的日期]</td></tr><tr><td>tags</td><td>标签，多标签请用<code>[标签1,标签2]</code></td></tr><tr><td>categories</td><td>分类</td></tr></tbody></table><p>修改对应的值即可更改文章信息</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>markdown是为了让用户更关注于写作本身而不是排版的一种轻量级的语言。</p><p>举个例子</p><pre><code class="markdown"># 一级标题## 二级标题### 三级标题</code></pre><p>比较好用的编辑器是 <strong>Typora</strong>， <strong>VScode</strong>也可以进行编辑。</p><p>markdown具体语法可以参考<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>。</p><p>一般图片保存应该保存在图床上，因为Gitee免费仓库的存储空间只有500M，而且访问速度也不快。</p><p>我们可以使用免费的 <strong>路过图床</strong>。</p><h2 id="更新博客到网页上"><a href="#更新博客到网页上" class="headerlink" title="更新博客到网页上"></a>更新博客到网页上</h2><p>在git bash输入</p><pre><code class="bash">hexo g -d</code></pre><p>就可以把博客更新的内容上传到Github上，接着我们登录码云，点击<strong>强制同步</strong></p><p>就可以更新博客到码云上了。</p><p>更新后，我们可以通过<strong>你的用户名.gitee.io</strong>就可以直接访问你的博客了。</p><p>这样的方式不需要经过码云漫长的部署，在国内的访问速度也更快。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄沙之上，是你的故乡吗</title>
    <link href="/2020/02/16/%E9%BB%84%E6%B2%99%E4%B9%8B%E4%B8%8A%EF%BC%8C%E6%98%AF%E4%BD%A0%E7%9A%84%E6%95%85%E4%B9%A1%E5%90%97/"/>
    <url>/2020/02/16/%E9%BB%84%E6%B2%99%E4%B9%8B%E4%B8%8A%EF%BC%8C%E6%98%AF%E4%BD%A0%E7%9A%84%E6%95%85%E4%B9%A1%E5%90%97/</url>
    
    <content type="html"><![CDATA[<h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>在我小的时候，还是五年级到初二的时候，我喜欢看书。</p><p>从鲁迅的《野草》到《Java从入门到入土》，我看过的书种类很多，那时候不仅喜欢看书，还喜欢买书，所以那时候常常跟三五好友去书城。</p><p>去书城的话难免经过一条路，那条路来来回回走了无数次了。</p><p>在相册翻了好久，能够找到一张那时候拍的照片。</p><p><img src="https://s2.ax1x.com/2020/02/16/3pHMef.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>自从初三后，我就很少去过书城了。到了高中后，每周回一次家后的生活基本上就是打游戏，去书城就更无从谈起了。</p><h1 id="沙面"><a href="#沙面" class="headerlink" title="沙面"></a>沙面</h1><p>在广州，有一个因沙子堆积形成的小岛，上面各种各样国家的建筑，述说着这里发生的历史。</p><p><img src="https://s2.ax1x.com/2020/02/16/3p4idJ.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3phC4I.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/39kGQ0.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/39k3zq.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>看到这里，我难免会想起湛江的那条法式风情街，</p><h1 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h1><p>湛江，她也有一段难忘的历史。</p><p><img src="https://s2.ax1x.com/2020/02/16/3pfiXF.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3phZDg.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3prD00.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3pfmfx.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3pfzHH.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>回想现在，我已经很少买书了。</p><p>我怀念那时候的生活。</p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黄沙</tag>
      
      <tag>广州</tag>
      
      <tag>湛江</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
