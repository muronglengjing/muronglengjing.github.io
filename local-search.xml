<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>tkinter快速入门</title>
    <link href="/2020/02/21/tkinter-quick/"/>
    <url>/2020/02/21/tkinter-quick/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="Frame框架"><a href="#Frame框架" class="headerlink" title="Frame框架"></a>Frame框架</h1><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td>父组件</td><td>要将组件放置的位置</td></tr></tbody></table><h1 id="Label文本框"><a href="#Label文本框" class="headerlink" title="Label文本框"></a>Label文本框</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td>字符串</td><td>文本</td></tr><tr><td>bg</td><td>字符串</td><td>背景色</td></tr><tr><td>fg</td><td>字符串</td><td>前景色</td></tr><tr><td>font</td><td>([表示字体的字符串]， 大小)</td><td>字体</td></tr><tr><td>width</td><td>数字</td><td>宽度</td></tr><tr><td>height</td><td>数字</td><td>高度</td></tr><tr><td>justify</td><td>“left”, “center”,  “right”</td><td>文本对齐的方式</td></tr></tbody></table><h1 id="Entry单行文本框"><a href="#Entry单行文本框" class="headerlink" title="Entry单行文本框"></a>Entry单行文本框</h1><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>show</td><td>字符</td><td>作为密码时显示的内容</td></tr><tr><td>textvariable</td><td>tkinter.Variable()</td><td>替代文本选项资源</td></tr><tr><td>width</td><td></td><td></td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><pre><code class="python">Entry.get()</code></pre><h3 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h3><pre><code class="python">Text.delete([整数索引1]，[整数索引2])</code></pre><table><thead><tr><th>整数索引</th><th></th></tr></thead><tbody><tr><td>0</td><td>开头</td></tr><tr><td>tkinter.INSERT</td><td>光标</td></tr><tr><td>tkinter.END</td><td>结尾</td></tr></tbody></table><h1 id="Text多行文本框"><a href="#Text多行文本框" class="headerlink" title="Text多行文本框"></a>Text多行文本框</h1><h2 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>width</td><td></td><td></td></tr><tr><td>height</td><td></td><td></td></tr></tbody></table><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><pre><code class="python">Text.insert([浮点数索引]， 文本)</code></pre><table><thead><tr><th>浮点数索引</th><th></th></tr></thead><tbody><tr><td>0.0/1.0</td><td>在开头插入</td></tr><tr><td>tkinter.INSERT</td><td>在光标插入</td></tr><tr><td>tkinter.END/2.0</td><td>在结尾插入</td></tr></tbody></table><h3 id="获取文本-1"><a href="#获取文本-1" class="headerlink" title="获取文本"></a>获取文本</h3><pre><code class="python">Text.get([浮点数索引1]，[浮点数索引2])</code></pre><h3 id="清除文本"><a href="#清除文本" class="headerlink" title="清除文本"></a>清除文本</h3><pre><code class="python">Text.delete([浮点数索引1]，[浮点数索引2])</code></pre><h1 id="Scrollbar滚动条"><a href="#Scrollbar滚动条" class="headerlink" title="Scrollbar滚动条"></a>Scrollbar滚动条</h1><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>在能够向下滚动的部件 如 <em>多行文本框、列表</em>等参数中加入<code>yscrollcommand=scroll.set</code>（同样也有<code>xscrollcommand=scroll.set</code>），即可绑定滚动条。</p><p>然后再把函数</p><p>控件Scrollbar.config(command=[绑定的控件].yview)</p><h1 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td>字符串</td><td>按钮文本</td></tr><tr><td>command</td><td>函数对象（不带括号）</td><td>按下要执行的函数</td></tr><tr><td>width</td><td></td><td></td></tr><tr><td>height</td><td></td><td></td></tr></tbody></table><h1 id="Radiobutton单选框"><a href="#Radiobutton单选框" class="headerlink" title="Radiobutton单选框"></a>Radiobutton单选框</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td></td><td></td></tr><tr><td>value</td><td>整形数字</td><td>排序</td></tr><tr><td>variable</td><td>tkinter.IntVar()</td><td>虚拟变量。绑定同一虚拟变量可以辨别单选框。</td></tr><tr><td>command</td><td></td><td></td></tr></tbody></table><h1 id="Checkbutton多选框"><a href="#Checkbutton多选框" class="headerlink" title="Checkbutton多选框"></a>Checkbutton多选框</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td></td><td></td></tr><tr><td>variable</td><td>tkinter.BooleanVar()</td><td>绑定的虚拟变量</td></tr><tr><td>command</td><td></td><td></td></tr></tbody></table><h1 id="Listbox列表"><a href="#Listbox列表" class="headerlink" title="Listbox列表"></a>Listbox列表</h1><h2 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>selectmode</td><td>“single”、”browse”、”multiple”、”extended”</td><td>选择模式。单选，拖动/按动多选，多选，Ctrl/Shift多选</td></tr></tbody></table><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre><code class="python">Listbox().insert([插入的索引]，[插入的文本])</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code class="python">Listbox().delete([索引1]，[索引2])</code></pre><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><pre><code class="python">Listbox().get([索引1]，[索引2])</code></pre><h1 id="Scale拖动条"><a href="#Scale拖动条" class="headerlink" title="Scale拖动条"></a>Scale拖动条</h1><h2 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>from_</td><td>数字</td><td>开始</td></tr><tr><td>to</td><td>数字</td><td>结束</td></tr><tr><td>length</td><td>数字</td><td>长度</td></tr><tr><td>tickinterval</td><td>数字</td><td>刻度间隔</td></tr><tr><td>orient</td><td>tkinter.VERTICAL、tkinter.HORIZONTAL</td><td>竖直、水平</td></tr></tbody></table><h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h2><pre><code class="python">Scale().get()</code></pre><h1 id="Spinbox数字选框"><a href="#Spinbox数字选框" class="headerlink" title="Spinbox数字选框"></a>Spinbox数字选框</h1><h2 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>from_</td><td></td><td></td></tr><tr><td>to</td><td></td><td></td></tr><tr><td>increment</td><td>数字</td><td>间隔</td></tr><tr><td>textvariable</td><td></td><td></td></tr><tr><td>command</td><td></td><td></td></tr></tbody></table><h2 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h2><pre><code class="python">Spinbox().get()</code></pre><h1 id="Menu菜单"><a href="#Menu菜单" class="headerlink" title="Menu菜单"></a>Menu菜单</h1><h2 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr></tbody></table><h2 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h2><h3 id="菜单条"><a href="#菜单条" class="headerlink" title="菜单条"></a>菜单条</h3><pre><code class="python">menubar = tkinter.Menu(win)master.config(menu=menubar)</code></pre><h3 id="菜单项"><a href="#菜单项" class="headerlink" title="菜单项"></a>菜单项</h3><h4 id="添加项头"><a href="#添加项头" class="headerlink" title="添加项头"></a>添加项头</h4><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>tearoff</td><td>布尔类型</td><td>菜单可否单独显示</td></tr></tbody></table><pre><code class="python">menu = tkinter.Menu(menubar, tearoff=False)menubar.add_cascade(label=[显示的字符串], menu=menu)</code></pre><h4 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h4><pre><code class="python">menu.add_command(label=[显示的字符串], command=[函数])</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来做个课程表吧（三）</title>
    <link href="/2020/02/21/do-a-classbook-3/"/>
    <url>/2020/02/21/do-a-classbook-3/</url>
    
    <content type="html"><![CDATA[<p>实际上两个版本的界面还是不能让人满意，接下来我们来用<strong>pygame</strong>来为课程表优化界面吧。</p><p>[toc]</p><h1 id="保存课程表数据"><a href="#保存课程表数据" class="headerlink" title="保存课程表数据"></a>保存课程表数据</h1><p>我们把数据保存在外部文件上，方便多次修改于调用。</p><p>用<em>data.json</em>来保存开始的时间，和数据中保存数据中保存名字、周等的键名。</p><pre><code class="json">{  &quot;start&quot;: [2020, 2, 20],  &quot;book&quot;: {    &quot;name&quot;:&quot;kcmc&quot;,    &quot;teacher&quot;:&quot;xm&quot;,    &quot;week&quot;: &quot;zcd&quot;,    &quot;part&quot;: &quot;jcor&quot;,    &quot;weekday&quot;: &quot;xqjmc&quot;,    &quot;address&quot;: &quot;cdmc&quot;}}</code></pre><p>用<em>class.json</em>保存课程数据，这样在不同的更新课表后不用修改代码直接修改课程文件即可。</p><p>然后打开这两个文件，并转化为json。</p><pre><code class="python"># 用外部文件来保存键值对with open(&quot;data.json&quot;, &quot;r&quot;) as f:    init = json.loads(f.read())# 保存课程数据with open(&quot;class.json&quot;, &quot;rb&quot;) as f:    class_js = f.read()    js = json.loads(class_js)  # 转化为json</code></pre><h1 id="绘制课程表"><a href="#绘制课程表" class="headerlink" title="绘制课程表"></a>绘制课程表</h1><h2 id="初始化窗口"><a href="#初始化窗口" class="headerlink" title="初始化窗口"></a>初始化窗口</h2><p>定义一个970*720的窗口大小，将屏幕填充为白色。设置标题为课程表。</p><pre><code class="python">pygame.init()screen = pygame.display.set_mode([970, 720])screen.fill([255, 255, 255])pygame.display.set_caption(&quot;课程表&quot;)</code></pre><h2 id="绘制课程表的背景"><a href="#绘制课程表的背景" class="headerlink" title="绘制课程表的背景"></a>绘制课程表的背景</h2><p>课程表的背景有</p><ol><li><p>一条条颜色渐变的方块（区分不同节课）</p></li><li><p>一块显示当前星期几的方块</p></li><li><p>在最上面显示星期</p></li></ol><pre><code class="python">def c_box(week):    for i in range(18):        pygame.draw.rect(screen, [255-15*i, 255, 170+5*i], [0, 45 + 45 * (i-1), 1080, 45], 0)    # 显示当前星期几    surface = pygame.Surface((135, 720))    surface.fill([240, 240, 200])    surface.set_alpha(150)    screen.blit(surface, ((week - 1) * 130 + 50, 0))    # 设置字体    my_font = pygame.font.SysFont(&quot;microsoftyaheimicrosoftyaheiui&quot;, 30)    weekday = [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;]    for i in range(7):        text = my_font.render(weekday[i], True, [100, 200, 255], [255, 255, 255])        text.set_colorkey([255, 255, 255]) # 透明化        screen.blit(text, (130*i + 75, 5))</code></pre><p>显示的结果为：</p><img src="C:\Users\ruanq\AppData\Roaming\Typora\typora-user-images\image-20200221101415386.png" srcset="/img/loading.gif" style="zoom: 50%;" /><h2 id="绘制课程表小格子"><a href="#绘制课程表小格子" class="headerlink" title="绘制课程表小格子"></a>绘制课程表小格子</h2><h3 id="定义课程格子类"><a href="#定义课程格子类" class="headerlink" title="定义课程格子类"></a>定义课程格子类</h3><p>课程的小格子根据课程时间长短确认</p><p>定义一个课程格子类</p><p>其中输入为：</p><ol><li>要显示的课程信息</li><li>课程在星期几上课</li><li>课程开始的节数</li><li>课程结束的节数</li></ol><p>课程格子的颜色随机，文本根据换行符排列。</p><p>最后用一个精灵组来保存每个课程格子。</p><pre><code class="python"># 课程表里的每个格子class Class_list(pygame.sprite.Sprite):    def __init__(self, text, weekday, start, end):        # 继承        super().__init__()        # 分割文本        self.text = text.split(&quot;\n&quot;)        self.weekday = weekday        # 设置控件的大小        self.image = pygame.Surface((125, 80*(end-start)))        self.r, self.g, self.b = random.randint(0, 254), random.randint(0, 254), random.randint(0, 254)        self.image.fill([self.r, self.g, self.b])        self.image.set_alpha(200) # 透明化        # 设置控件的位置        self.rect = pygame.Rect((130*weekday + 55, 45*start), self.image.get_size())        # 绘制字体        self.font()    def font(self):        # 定义一个字体        my_font = pygame.font.SysFont(&quot;microsoftyaheimicrosoftyaheiui&quot;, 15)        # 如果背景为浅色则前景为深色        if 0.21 * self.r + 0.72 * self.g + 0.07 * self.b &gt; 200:            color = [0, 0, 0]        else:            color = [255, 255, 255]        n = 0        # 每行打印一句话        for i in self.text:            text = my_font.render(i, True, color, [self.r, self.g, self.b])            self.image.blit(text, (0, n*20))            n += 1class_box = pygame.sprite.Group()</code></pre><h3 id="判断课程是否符合条件"><a href="#判断课程是否符合条件" class="headerlink" title="判断课程是否符合条件"></a>判断课程是否符合条件</h3><p>同上一篇博客。</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;{}\n讲师 {}\n周 {}\n地点 {}&quot;.format(        course[key[&quot;name&quot;]], course[key[&quot;teacher&quot;]], course[key[&quot;week&quot;]], course[key[&quot;address&quot;]])    week = course[key[&quot;week&quot;]]    # 判断课程是否是单双周的课程    if &quot;单&quot; in week:        week = week.replace(&quot;周(单)&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if weeks % 2 == 1: # 判断是否是单周            if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                    # 根据节来优化显示效果                    read_class(course, key)</code></pre><h3 id="绘制小格子"><a href="#绘制小格子" class="headerlink" title="绘制小格子"></a>绘制小格子</h3><p>如果判断正确，就绘制课程小格子。输入的内容为课程的数据。</p><pre><code class="python">def read_class(course):    scr = &quot;{}\n讲师 {}\n周 {}\n地点 {}&quot;.format(        course[key[&quot;name&quot;]], course[key[&quot;teacher&quot;]], course[key[&quot;week&quot;]], course[key[&quot;address&quot;]]) # 要显示的课程信息    part = course[key[&quot;part&quot;]]    part = part.split(&quot;-&quot;)    start_part, end_part = eval(part[0]), eval(part[-1])    # 确认文本的位置    x = weekday.index(course[key[&quot;weekday&quot;]])    li = Class_list(scr, x, start_part, end_part)    class_box.add(li)</code></pre><h1 id="绘制屏幕"><a href="#绘制屏幕" class="headerlink" title="绘制屏幕"></a>绘制屏幕</h1><p>把课程格子绘制在屏幕上，最后更新屏幕。</p><pre><code class="python">class_box.draw(screen)pygame.display.update()while True:    for event in pygame.event.get():        if event.type == pygame.QUIT:            # 退出游戏            pygame.quit()            break</code></pre><p>最后的显示效果为：</p><img src="https://img-blog.csdnimg.cn/20200221092754789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述" style="zoom: 50%;" /><p>我们的课程表就做好啦！</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程表</tag>
      
      <tag>tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来做个课程表吧（二）</title>
    <link href="/2020/02/20/do-a-classbook-2/"/>
    <url>/2020/02/20/do-a-classbook-2/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>我们想要根据当前第几周显示课程表。</p><h1 id="确认当前时间"><a href="#确认当前时间" class="headerlink" title="确认当前时间"></a>确认当前时间</h1><h2 id="初始化时间"><a href="#初始化时间" class="headerlink" title="初始化时间"></a>初始化时间</h2><p>首先我们要确认一个学期的开始。我们设置一个日期。如果这个日期是星期天那么他就是一个学期的开始，如果不是，那么就变更这一天到最近的周日。</p><pre><code class="python">import datetime# 确认开始的日期 年/月/日init_year = 2020init_mouth = 2init_day = 20# 如果开始的一天不是周日，则将开始的日期变为周日if not datetime.datetime(init_year, init_mouth, init_day).strftime(&quot;%w&quot;) == 0:    init_day -= eval(datetime.datetime(init_year, init_mouth, init_day).strftime(&quot;%w&quot;))</code></pre><h2 id="计算当前周数"><a href="#计算当前周数" class="headerlink" title="计算当前周数"></a>计算当前周数</h2><p>计算当前日期于初始化时间直接差了多少天，然后除以7取余。结果从一开始，在weeks上面加个1.</p><pre><code class="python"># 初始化的时间init_date = datetime.datetime(init_year, init_mouth, init_day)# 现在的时间now_date = datetime.datetime.today()# 间隔的天数days = (now_date - init_date).days# 间隔的周数，第一周为1weeks = int(days / 7) + 1</code></pre><h1 id="绘制当前周"><a href="#绘制当前周" class="headerlink" title="绘制当前周"></a>绘制当前周</h1><h2 id="判断是否是当前周的课程"><a href="#判断是否是当前周的课程" class="headerlink" title="判断是否是当前周的课程"></a>判断是否是当前周的课程</h2><p>首先我们打印下保存周数据的字符串</p><pre><code class="python">print(course[&quot;zcd&quot;])</code></pre><p>输出结果为</p><img src="https://img-blog.csdnimg.cn/20200220201217939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom: 67%;" /><p>可以看到，有的课程分单双周，所以要分别加以判断。</p><p>具体做法是，</p><ol><li><strong>判断</strong>“单”、“双”是否在字符串里，如果在的话，先<strong>剔除</strong>“周（单）”、“周（双）”，不在的话直接剔除“周”。</li><li>用“-”把字符串<strong>分隔</strong>开，取第一个为<strong>开始周</strong>，最后一个为<strong>结束周</strong>（因为开始周结束周可能是<strong>同一个</strong>！）。判断当前周是否在开始周于结束周之内。</li><li>如果是单双周的话还要判断除以二的余数。</li></ol><pre><code class="python">    week = course[&quot;zcd&quot;]    # 判断课程是否是单双周的课程    if &quot;单&quot; in week:        week = week.replace(&quot;周(单)&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if weeks % 2 == 1: # 判断是否是单周            if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                   [放置文本控件]    elif &quot;双&quot; in week:        week = week.replace(&quot;周(双)&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if weeks % 2 == 0:  # 判断是否是双周            if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                    [放置文本控件]    else:        week = week.replace(&quot;周&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程            [放置文本控件]</code></pre><p>以上判断都成立后就可以放置文本控件了。</p><h2 id="放置文本控件"><a href="#放置文本控件" class="headerlink" title="放置文本控件"></a>放置文本控件</h2><p>首先我们输出一下保存节数的字符串。</p><pre><code class="python">print(course[&quot;jcor&quot;])</code></pre><p>输出结果为</p><img src="https://img-blog.csdnimg.cn/20200220203144577.png" srcset="/img/loading.gif" style="zoom:67%;" /><p>那么我们就首先根据“-”把文本分隔开，然后取第一个和最后一个的数据，第一个数据确认了这节课所处的位置的y轴（一天的课不可能重叠），然后用星期来确认x轴</p><pre><code class="python">                    # 根据节来优化显示效果                    part = course[&quot;jcor&quot;]                    part = part.split(&quot;-&quot;)                    start_part, end_part = eval(part[0]), eval(part[-1])                    # 确认文本的位置                    x = weekday.index(course[&quot;xqjmc&quot;])                    text = Text(top, width=30, height=3 * (end_part - start_part + 1))  # 创建一个文本控件                    text.place(x=x * 215 + 10, y=start_part * 40 + 20)  # 在屏幕上放置文本控件                    text.insert(INSERT, scr)  # 在控件上放置文本</code></pre><p>最后进入消息循环。</p><pre><code class="python">top.mainloop()  # 进入消息循环</code></pre><p>最后的结果为</p><img src="https://img-blog.csdnimg.cn/20200220203024657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程表</tag>
      
      <tag>tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来做个课程表吧（一）</title>
    <link href="/2020/02/20/do-a-classbook-1/"/>
    <url>/2020/02/20/do-a-classbook-1/</url>
    
    <content type="html"><![CDATA[<p>手机端的课程表种类繁多，但电脑端的课程表种类却很少，也不支持自动导课。既然这样就让我们来造轮子吧。</p><p>[toc]</p><h2 id="获取课程表"><a href="#获取课程表" class="headerlink" title="获取课程表"></a>获取课程表</h2><p>首先我们先去获取课程表。登录教务，点击 <strong>学生课表查询</strong>，进入课表界面，按<strong>F12</strong>，导航到 <strong>Network</strong>，按下 <strong>ctrl</strong>+ <strong>r</strong>刷新界面，界面更新后，下面出现了几个文件，让我们一个个查看。</p><img src="https://img-blog.csdnimg.cn/20200220142854836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113238781" style="zoom:50%;" /><p>接下来点击 <strong>Preview</strong>，当我们找到第三个的时候我们可以发现里面包含了课程名、时间等，正好是我们需要的内容。</p><img src="https://img-blog.csdnimg.cn/20200220142943160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113418598" style="zoom:50%;" /><p>接下来我们用右键选择 <strong>Copy response</strong>，然后这个JSON就保存到我们的粘贴板上了。</p><img src="https://img-blog.csdnimg.cn/20200220143013947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113524084" style="zoom:50%;" /><h1 id="制作课程表"><a href="#制作课程表" class="headerlink" title="制作课程表"></a>制作课程表</h1><h2 id="读取JSON数据"><a href="#读取JSON数据" class="headerlink" title="读取JSON数据"></a>读取JSON数据</h2><p>接下来我们使用python来制作课程表</p><p>首先导入json包，然后导入刚才粘贴的数据，然后把它打印出来</p><pre><code class="python"># -*- coding:GBK -*-         # 文件编码import jsonclass_js = &#39;&#39;&#39;[复制刚才的粘贴内容在这里]&#39;&#39;&#39;js = json.loads(class_js)  # 转化为jsonprint(js)</code></pre><p>输出结果是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200220143115350.png" srcset="/img/loading.gif" alt="image-20200220114157479"></p><p>结果是我们要的数据</p><h2 id="获取课程"><a href="#获取课程" class="headerlink" title="获取课程"></a>获取课程</h2><p>我们可以看到课程数据保存在<strong>kbList</strong>这个值里，我们只用把这个值下面的数据全部取出来。</p><img src="https://img-blog.csdnimg.cn/20200220143137591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220114520679" style="zoom: 67%;" /><p>他的键值对是这样的</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>kcmc</td><td>课程名</td></tr><tr><td>xm</td><td>讲师</td></tr><tr><td>zcd</td><td>周数</td></tr><tr><td>jcor</td><td>节数</td></tr><tr><td>xqjmc</td><td>星期</td></tr><tr><td>cdmc</td><td>地点</td></tr></tbody></table><p>接下来我们把需要的数据输出一下</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;课程名:\n{}\n讲师:{}\n节:{}\n周:{}&quot;.format(        course[&quot;kcmc&quot;], course[&quot;xm&quot;], course[&quot;zcd&quot;], course[&quot;jcor&quot;])    print(scr)</code></pre><p>打印的结果是这样的：</p><img src="https://img-blog.csdnimg.cn/2020022014315311.png" srcset="/img/loading.gif" alt="image-20200220114817546" style="zoom: 67%;" /><h2 id="格式化课程表"><a href="#格式化课程表" class="headerlink" title="格式化课程表"></a>格式化课程表</h2><p>这样我们就完成了课程表的制作，但这是不完善的。</p><p>比如竖着一排看起来很麻烦，而且找课程也不方便，接下来我们来给课程表添加一个界面。</p><p>我们挑选tkinter来给完成这个界面。</p><h3 id="创建窗体"><a href="#创建窗体" class="headerlink" title="创建窗体"></a>创建窗体</h3><p>首先我们要<strong>导入tkinter</strong>，并<strong>创建一个窗体</strong>。</p><pre><code class="python">from tkinter import *top = Tk()  # 创建一个窗体top.geometry(&quot;1100x400+200+50&quot;) # 改变窗体的大小top.mainloop()  # 进入消息循环</code></pre><p>显示效果为</p><img src="https://img-blog.csdnimg.cn/20200220143210110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220135607560" style="zoom:50%;" /><h3 id="显示课程"><a href="#显示课程" class="headerlink" title="显示课程"></a>显示课程</h3><p>我们根据星期几来放置课程，星期一一列星期二一列。</p><p>首先我们要创建一个列表来记录星期的数据，再创建一个字典来保存当前天有几节课。</p><pre><code class="python">week = [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;]y = {}</code></pre><p>接下来我们把为每个课程数据创建一个文本控件，并把文本放在里面。</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;课程名:\n{}\n讲师:{}\n节:{}\n周:{}&quot;.format(        course[&quot;kcmc&quot;], course[&quot;xm&quot;], course[&quot;zcd&quot;], course[&quot;jcor&quot;])    print(scr)    # 确认文本的位置    x = week.index(course[&quot;xqjmc&quot;])    if course[&quot;xqjmc&quot;] in y:        y[course[&quot;xqjmc&quot;]] = y[course[&quot;xqjmc&quot;]] + 1    else:        y[course[&quot;xqjmc&quot;]] = 0    text = Text(top, width=30, height=5)  # 创建一个文本控件    text.place(x=x * 215 + 10, y=y[course[&quot;xqjmc&quot;]] * 70 + 20)  # 在屏幕上放置文本控件    text.insert(INSERT, scr)  # 在控件上放置文本</code></pre><p>通过x保存星期的天数，并格式化为0~7，用y保存一天有几节课。</p><p>最后进入消息循环：</p><pre><code class="python">top.mainloop()  # 进入消息循环</code></pre><p>运行的结果是：</p><img src="https://img-blog.csdnimg.cn/20200220143231624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom:50%;" /><p>当然，这样的结果并不能让我们满意。我们希望能够根据当前所在的周数显示课程。而且这个界面也太丑了，还不如直接下载课程来的方便。下面让我们来改进课程表。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程表</tag>
      
      <tag>tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从OpenCv到照片调色</title>
    <link href="/2020/02/19/%E4%BB%8EOpenCv%E5%88%B0%E7%85%A7%E7%89%87%E8%B0%83%E8%89%B2/"/>
    <url>/2020/02/19/%E4%BB%8EOpenCv%E5%88%B0%E7%85%A7%E7%89%87%E8%B0%83%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCv"><a href="#OpenCv" class="headerlink" title="OpenCv"></a>OpenCv</h1><h3 id="什么是opencv？"><a href="#什么是opencv？" class="headerlink" title="什么是opencv？"></a>什么是opencv？</h3><p>opencv是一个跨平台的计算机视觉库，由一系列函数构成，可以对照片进行一系列操作。</p><h2 id="颜色模型"><a href="#颜色模型" class="headerlink" title="颜色模型"></a>颜色模型</h2><h3 id="RGB模型"><a href="#RGB模型" class="headerlink" title="RGB模型"></a>RGB模型</h3><p>RGB模型是指图片由三个通道 <strong>红色（red）</strong>、 <strong>绿色（green）</strong>、和 <strong>蓝色（blue）</strong>构成</p><p>，每个值从0到255构成，0代表无，255代表最大值，</p><h3 id="CMKY模型"><a href="#CMKY模型" class="headerlink" title="CMKY模型"></a>CMKY模型</h3><h3 id="HSI颜色模型"><a href="#HSI颜色模型" class="headerlink" title="HSI颜色模型"></a>HSI颜色模型</h3>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2020/02/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/"/>
    <url>/2020/02/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><pre><code class="bash">git init</code></pre><h3 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h3><pre><code class="bash">git add [文件名]</code></pre><h3 id="提交修改到版本库"><a href="#提交修改到版本库" class="headerlink" title="提交修改到版本库"></a>提交修改到版本库</h3><pre><code class="bash">git commit -m [文本内容]</code></pre><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><pre><code class="bash">git log</code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><pre><code class="bash">git reset --hard HEAD~[版本个数]</code></pre><h3 id="查看操作的内容"><a href="#查看操作的内容" class="headerlink" title="查看操作的内容"></a>查看操作的内容</h3><pre><code class="bash">git reflog</code></pre><h3 id="查看缓存区与工作区的工作状态"><a href="#查看缓存区与工作区的工作状态" class="headerlink" title="查看缓存区与工作区的工作状态"></a>查看缓存区与工作区的工作状态</h3><pre><code class="bash">git status</code></pre><h3 id="丢弃缓存区"><a href="#丢弃缓存区" class="headerlink" title="丢弃缓存区"></a>丢弃缓存区</h3><pre><code class="bash">git checkout -- [文件名]</code></pre><h3 id="删除工作区文件"><a href="#删除工作区文件" class="headerlink" title="删除工作区文件"></a>删除工作区文件</h3><pre><code class="bash">git rm [文件名]</code></pre><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><pre><code class="bash">git branch</code></pre><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><pre><code class="bash">git branch [分支名]</code></pre><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><pre><code class="bash">git switch [分支名]</code></pre><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><pre><code class="bash">git merge [分支名]</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><pre><code class="bash">git branch -d [分支名]</code></pre><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><pre><code class="bash">git tag</code></pre><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><pre><code class="bash">git tag [标签名]</code></pre><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><pre><code class="bash">git tag -d [标签名]</code></pre><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><pre><code class="bash">git remote add origin [Git的ssh地址]</code></pre><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><pre><code class="bash">git push -u origin master</code></pre><h3 id="推送更新到远程仓库"><a href="#推送更新到远程仓库" class="headerlink" title="推送更新到远程仓库"></a>推送更新到远程仓库</h3><pre><code class="bash">git push origin master</code></pre><h3 id="强制推送到远程仓库"><a href="#强制推送到远程仓库" class="headerlink" title="强制推送到远程仓库"></a>强制推送到远程仓库</h3><pre><code class="bash">git push origin master -f</code></pre><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><pre><code class="bash">git remote</code></pre><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><pre><code class="bash">git remote rm [仓库名]</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来搭建属于你的博客吧</title>
    <link href="/2020/02/17/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/"/>
    <url>/2020/02/17/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>要想搭建一个属于自己的博客平台，你需要</p><ul><li>一个Github账号和Gitee账号（搭建免费的服务平台）</li><li>一台电脑（保存你的博客）</li><li>一个图床（保存图片）</li></ul><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>具体安装过程可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></p><h2 id="同步Github"><a href="#同步Github" class="headerlink" title="同步Github"></a>同步Github</h2><p>首先我们要在Github创建一个<strong>仓库</strong>，仓库的名字的格式应该是<strong>你的用户名.github.io</strong>，记下仓库的地址http的地址，然后我们修改 <em>_config.yml</em>文件，在最后一行的改成</p><pre><code class="yaml">deploy:  type: git  repository: [你的仓库地址]  branch: master</code></pre><p>再根据<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">hexo官方文档</a>的指引，增加 <em>.travis.yml</em>文件.</p><p>然后在控制台输入以下命令</p><pre><code class="bash">npm install hexo-deployer-git</code></pre><h2 id="同步码云"><a href="#同步码云" class="headerlink" title="同步码云"></a>同步码云</h2><p>在码云里，新建一个 <strong>仓库</strong>，名字要与你的<strong>用户名</strong>相同<br>点击<strong>管理</strong>，填入<strong>仓库远程地址</strong>，点击<strong>保存</strong> 。</p><p>找到 <strong>服务</strong>，点击 <strong>Gitee Pages</strong>，开启服务。</p><h1 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h1><h2 id="创建一篇新博客"><a href="#创建一篇新博客" class="headerlink" title="创建一篇新博客"></a>创建一篇新博客</h2><p>在Git bash中输入</p><pre><code class="bash">hexo n [文章的标题]</code></pre><p>如果标题中带空格则需要用英文的双引号括起。</p><p>接着在当前目录下可以找到 <strong>source\_posts</strong> 的有个 <strong>[标题].md</strong>的文件，可以用记事本直接进入修改。</p><p>在文件的前几行有这样几条数据</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>title</td><td>[标题]</td></tr><tr><td>date</td><td>[发布的日期]</td></tr><tr><td>tags</td><td>标签，多标签请用<code>[标签1,标签2]</code></td></tr><tr><td>categories</td><td>分类</td></tr></tbody></table><p>修改对应的值即可更改文章信息</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>markdown是为了让用户更关注于写作本身而不是排版的一种轻量级的语言。</p><p>举个例子</p><pre><code class="markdown"># 一级标题## 二级标题### 三级标题</code></pre><p>比较好用的编辑器是 <strong>Typora</strong>， <strong>VScode</strong>也可以进行编辑。</p><p>markdown具体语法可以参考<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>。</p><p>一般图片保存应该保存在图床上，因为Gitee免费仓库的存储空间只有500M，而且访问速度也不快。</p><p>我们可以使用免费的 <strong>路过图床</strong>。</p><h2 id="更新博客到网页上"><a href="#更新博客到网页上" class="headerlink" title="更新博客到网页上"></a>更新博客到网页上</h2><p>在git bash输入</p><pre><code class="bash">hexo g -d</code></pre><p>就可以把博客更新的内容上传到Github上，接着我们登录码云，点击<strong>强制同步</strong></p><p>就可以更新博客到码云上了。</p><p>更新后，我们可以通过<strong>你的用户名.gitee.io</strong>就可以直接访问你的博客了。</p><p>这样的方式不需要经过码云漫长的部署，在国内的访问速度也更快。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄沙之上，是你的故乡吗</title>
    <link href="/2020/02/16/%E9%BB%84%E6%B2%99%E4%B9%8B%E4%B8%8A%EF%BC%8C%E6%98%AF%E4%BD%A0%E7%9A%84%E6%95%85%E4%B9%A1%E5%90%97/"/>
    <url>/2020/02/16/%E9%BB%84%E6%B2%99%E4%B9%8B%E4%B8%8A%EF%BC%8C%E6%98%AF%E4%BD%A0%E7%9A%84%E6%95%85%E4%B9%A1%E5%90%97/</url>
    
    <content type="html"><![CDATA[<h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>在我小的时候，还是五年级到初二的时候，我喜欢看书。</p><p>从鲁迅的《野草》到《Java从入门到入土》，我看过的书种类很多，那时候不仅喜欢看书，还喜欢买书，所以那时候常常跟三五好友去书城。</p><p>去书城的话难免经过一条路，那条路来来回回走了无数次了。</p><p>在相册翻了好久，能够找到一张那时候拍的照片。</p><p><img src="https://s2.ax1x.com/2020/02/16/3pHMef.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>自从初三后，我就很少去过书城了。到了高中后，每周回一次家后的生活基本上就是打游戏，去书城就更无从谈起了。</p><h1 id="沙面"><a href="#沙面" class="headerlink" title="沙面"></a>沙面</h1><p>在广州，有一个因沙子堆积形成的小岛，上面各种各样国家的建筑，述说着这里发生的历史。</p><p><img src="https://s2.ax1x.com/2020/02/16/3p4idJ.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3phC4I.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/39kGQ0.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/39k3zq.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>看到这里，我难免会想起湛江的那条法式风情街，</p><h1 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h1><p>湛江，她也有一段难忘的历史。</p><p><img src="https://s2.ax1x.com/2020/02/16/3pfiXF.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3phZDg.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3prD00.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3pfmfx.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3pfzHH.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>回想现在，我已经很少买书了。</p><p>我怀念那时候的生活。</p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黄沙</tag>
      
      <tag>广州</tag>
      
      <tag>湛江</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
