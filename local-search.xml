<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++运算符重载思维导图</title>
    <link href="/2020/06/14/cpp7/"/>
    <url>/2020/06/14/cpp7/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/14/tz48r4.png" srcset="/img/loading.gif" alt="思维导图"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm在Anaconda环境下设置PyQt</title>
    <link href="/2020/06/10/set-pyqt-at-pycharm-in-anaconda/"/>
    <url>/2020/06/10/set-pyqt-at-pycharm-in-anaconda/</url>
    
    <content type="html"><![CDATA[<p>打开<code>Pycharm</code>，点击<code>文件（File）</code>-<code>设置（Setting）</code>-<code>工具（Tools）</code></p><h1 id="QtDesigner"><a href="#QtDesigner" class="headerlink" title="QtDesigner"></a>QtDesigner</h1><p>点击<code>加号（add）</code></p><p>第一个参数程序填入Qt自带的designer程序的地址</p><p>第二个参数不填</p><p>第三个参数填项目文件目录，如下图所示：</p><pre><code>D:\Qt\5.14.0\msvc2017_64\bin\designer.exe$ProjectFileDir$</code></pre><p><img src="https://i.loli.net/2020/06/10/e9QyPompxdSAuKa.png" srcset="/img/loading.gif" alt="image-20200610184328727"></p><p>点击<code>确认（Ok）</code></p><h1 id="PyUic"><a href="#PyUic" class="headerlink" title="PyUic"></a>PyUic</h1><p>点击<code>加号（add）</code></p><p>第一个填入Anaconda目录下的Python程序</p><p>第二个填入下面的参数</p><p>第三个填文件目录</p><p>如下图所示</p><pre><code>D:\Anaconda\python.exe-m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py$FileDir$</code></pre><p><img src="https://i.loli.net/2020/06/10/WJ9xDti6fYF3KCr.png" srcset="/img/loading.gif" alt="image-20200610184350806"></p><p>点击<code>确认（OK）</code></p><p>点击<code>应用（Apply）</code>即可配置成功。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyQt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简Note-Markdown笔记本	V1.1</title>
    <link href="/2020/05/15/RNote-Markdown2/"/>
    <url>/2020/05/15/RNote-Markdown2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/05/15/rZ3g2Tt6xbnuQ8z.png" srcset="/img/loading.gif" alt="V1_1"></p><h1 id="大道至简-V1-1"><a href="#大道至简-V1-1" class="headerlink" title="大道至简    V1.1"></a>大道至简    V1.1</h1><p>一个简单的Markdown管理工具</p><p>带有简单的解析器与文件管理系统。</p><h2 id="新增功能-相较V1-0"><a href="#新增功能-相较V1-0" class="headerlink" title="新增功能-相较V1.0"></a>新增功能-相较V1.0</h2><p>增加了管理数据的功能</p><p>有数据进行增加、删除等管理功能</p><p>能够导入导出数据</p><p>小问题的修复</p><p>界面美化</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><u><a href="https://ww.lanzous.com/icnvugh" target="_blank" rel="noopener">https://ww.lanzous.com/icnvugh</a></u></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
      <category>qt5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简Note-Markdown笔记本</title>
    <link href="/2020/05/14/RNote-Markdown/"/>
    <url>/2020/05/14/RNote-Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="简Note-Markdown笔记本"><a href="#简Note-Markdown笔记本" class="headerlink" title="简Note-Markdown笔记本"></a>简Note-Markdown笔记本</h1><p> 一个简单的Markdown文档管理工具。本身功能不多，以解决文件夹管理Markdown文件为目的，本身已经足够使用。</p><p><img src="https://i.loli.net/2020/05/14/26oTOFuhD8mjaH4.png" srcset="/img/loading.gif" alt=""></p><p>下载链接：<u><a href="https://ww.lanzous.com/icmhvkh" target="_blank" rel="noopener">https://ww.lanzous.com/icmhvkh</a></u></p><p>版本日志：</p><h4 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a>V1.0</h4><p>新界面，增加了文件管理功能。</p><p>运行快速创建笔记本、分区与页</p><p>能够使用默认方式打开浏览文件</p><p>这次开发花了很多时间</p><p>也占用了一些上课的时间</p><p>以后会在功能上完善它</p><p>不会再用上课时间开发了</p><p>2020-5-14</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
      <category>qt5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加密通讯</title>
    <link href="/2020/04/23/secert-message/"/>
    <url>/2020/04/23/secert-message/</url>
    
    <content type="html"><![CDATA[<p>不知何时起互联网上流行起了一串串的“黑话”，大家都在用一些字母或者符号替代自己的想法，u1s1，GKD，有些抽象大师，还会用emoji来表现自己的心情。这时候如果一个外行人看到他们说的话，会一脸懵逼点进来，然后一脸懵逼离开。</p><p>网络会把小群体放大，一些在小群体内的流行语，到了大圈子里，变成了各种梗。如果希望自己圈子里的事情不被别人用来吃瓜的话，就需要说一些“黑话”，在自己人都懂了的情况下，不被别人知晓。</p><p>所以在前几天偶然有一个点子：或许，我们可以用照片替代说话。</p><p>不是发表情包，要更捉摸不透点，是用照片的像素来保存想要说的话。</p><p>其实做起来也很简单，一张RGB格式的照片，每个像素点有三种颜色，每种颜色用一个字节来保存，加起来一共是三个字节。而文字编码，utf-8格式的，每个文字占用2个字节。我们可以用文字的两个字节来替代像素的颜色：</p><pre><code class="python">import cv2import numpy as nps = input()array = []long = int(len(s) ** 0.5 + 1)line = []for i in range(long * long):    if i &lt; len(s):        x = ord(s[i])    else:        x = 0    r = (int(x / 65536))    b = (int(x / 256))    g = (x % 256)    line.append([r, b, g])    if (i + 1) % long == 0:        array.append(line)        line = []cv2.imwrite(&quot;photo.bmp&quot;, array)</code></pre><p>操作完成后，为了测试效果，首先用废话生成器来生成一篇文章：<img src="https://i.loli.net/2020/04/23/s4nhTe19KoFmvHa.png" srcset="/img/loading.gif" alt=" "></p><p>经过转换，得到的图片是这样的：</p><p><img src="https://i.loli.net/2020/04/23/F8OgBsQE5KAhrL4.png" srcset="/img/loading.gif" alt="image-20200423174502410"></p><p>在别人看来，只有一张重复而鬼畜的图片，不解其意。</p><p>如果想要知道你发的是什么的话，还需要一个解密程序：</p><pre><code class="python">import cv2array = cv2.imread(&quot;photo.bmp&quot;)for i in array:    for j in i:        print(chr(int(j[0]*65536+j[1]*256+j[2])), end=&quot;&quot;)</code></pre><p>有了这个小程序，别人就可以知道，你发的是什么了。</p><p><img src="https://i.loli.net/2020/04/23/Jl34wWUgd9kL5jS.png" srcset="/img/loading.gif" alt="image-20200422124353829"></p><p>全文乱七八糟，但稍微翻译一下，就只有一句话：</p><p><img src="https://i.loli.net/2020/04/23/i1tolUgv8MxTdD9.png" srcset="/img/loading.gif" alt="image-20200422124453639"></p><p>这样，我们就可以通过间接的方式，来说一些悄悄话，小秘密了。</p><p>弗洛伊德在《梦的解析》中说过，“那些经过伪装欲望满足的梦，必然包含着对梦的反抗，因此在阻碍下，那愿望只是一个变形的表达……审查越严格，掩饰的方法就越夸张，让读者了解真意的方法也就越可笑。”</p><p>但是，如果真有什么特别想说的话，为什么不当面说呢？</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用python做个课程表吧（四）</title>
    <link href="/2020/03/12/do-a-class-4/"/>
    <url>/2020/03/12/do-a-class-4/</url>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28830804&auto=0&height=66"></iframe><p>[toc]</p><h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><p>首先，我们需要明确自己的设计需求。</p><p>课程表应该能读取课程，显示课程，管理课程。</p><h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p>首先，我们显示的应该是本周的课程，课程信息应该包括 课程名、节、地点、时间等必要信息，不同课程最好有不同颜色区分，同种课程的颜色最好相同。如下：</p><table><thead><tr><th></th><th>星期一</th><th>星期二</th><th>……</th></tr></thead><tbody><tr><td>第一节</td><td>课程一</td><td>课程二</td><td>……</td></tr><tr><td>第二节</td><td>课程三</td><td>课程四</td><td>……</td></tr><tr><td>……</td><td>……</td><td>……</td><td>……</td></tr></tbody></table><p>另外，我们有时候需要查看上下周的课程，所以应该有一个切换周次的按钮。</p><h2 id="管理课程"><a href="#管理课程" class="headerlink" title="管理课程"></a>管理课程</h2><p>我们需要根据当前是第几周来显示课程，所以需要保存第一周的时间；同时，也要显示当前是第几周的课程数据，所以需要保存每一节课的时间。</p><p>我们需要添加课程、删除课程，必要时能够修改课程。</p><p>另外，有时不想手动输入课程数据，我们应该能够直接从教务系统导入课程，需要一系列的键值对。</p><p>因此，我们的需要一个启动文件data.json：</p><pre><code class="json">{&quot;start&quot;: [2020, 2, 20],  &quot;local&quot;: [&quot;kbList&quot;],   &quot;book&quot;: {    &quot;name&quot;: &quot;kcmc&quot;,    &quot;teacher&quot;: &quot;xm&quot;,    &quot;week&quot;: &quot;zcd&quot;,     &quot;part&quot;: &quot;jcor&quot;,    &quot;weekday&quot;: &quot;xqjmc&quot;,    &quot;address&quot;: &quot;cdmc&quot;},   &quot;time&quot;: {&quot;1&quot;: &quot;8:50&quot;,    &quot;2&quot;: &quot;9:40&quot;,     &quot;3&quot;: &quot;10:40&quot;,     &quot;4&quot;: &quot;11:30&quot;,     &quot;5&quot;: &quot;14:00&quot;,     &quot;6&quot;: &quot;14:50&quot;,     &quot;7&quot;: &quot;15:45&quot;,     &quot;8&quot;: &quot;16:35&quot;,    &quot;9&quot;: &quot;19:00&quot;,     &quot;10&quot;: &quot;19:55&quot;,     &quot;11&quot;: &quot;20:50&quot;,     &quot;12&quot;: &quot;21:45&quot;}}</code></pre><p>接下来是保存课程的数据：</p><pre><code class="json">{&quot;课程名&quot;: {&quot;color&quot;: &quot;#665A79&quot;, &quot;subject&quot;: [{&quot;teacher&quot;: &quot;教师&quot;, &quot;week&quot;: &quot;1-16周（双）&quot;, &quot;weekday&quot;: &quot;星期几&quot;, &quot;address&quot;: &quot;地点&quot;, &quot;part&quot;: &quot;3-4&quot;}]}}</code></pre><p>json不支持中文，打开后会有很多转义符。</p><h1 id="实现课程表"><a href="#实现课程表" class="headerlink" title="实现课程表"></a>实现课程表</h1><h2 id="导入必要包"><a href="#导入必要包" class="headerlink" title="导入必要包"></a>导入必要包</h2><p>根据上面需求，我们能够显示时间的datetime包，读取数据的json包，绘制界面的tkinter包，判断文件是否存在的os包，还要一个随机数来随机生成颜色。</p><pre><code class="python">import datetimeimport jsonimport tkinterimport os.pathfrom random import randint</code></pre><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>首先我们要判断启动文件是否存在，如果不存在就生成一个启动文件。</p><pre><code class="python">if os.path.isfile(&quot;data.json&quot;):    # 用外部文件来保存键值对    with open(&quot;data.json&quot;, &quot;r&quot;) as f:        init = json.loads(f.read())else:    with open(&quot;data.json&quot;, &quot;w&quot;) as f:        init = {&quot;start&quot;: [2020, 2, 20],            &quot;time&quot;:                {&quot;1&quot;: &quot;8:50&quot;,                 &quot;2&quot;: &quot;9:40&quot;,                 &quot;3&quot;: &quot;10:40&quot;,                 &quot;4&quot;: &quot;11:30&quot;,                 &quot;5&quot;: &quot;14:00&quot;,                 &quot;6&quot;: &quot;14:50&quot;,                 &quot;7&quot;: &quot;15:45&quot;,                 &quot;8&quot;: &quot;16:35&quot;,                 &quot;9&quot;: &quot;19:00&quot;,                 &quot;10&quot;: &quot;19:55&quot;,                 &quot;11&quot;: &quot;20:50&quot;,                 &quot;12&quot;: &quot;21:45&quot;}}        json.dump(init, f)</code></pre><p>启动文件存在后，用就开始读取课程数据。如果课程数据文件不存在，则创建。</p><pre><code class="python"># 刷新def flesh():    global js, weeks    if os.path.isfile(&quot;my_class.json&quot;):        # 保存课程数据        with open(&quot;my_class.json&quot;, &quot;rb&quot;) as f:            class_js = f.read()            js = json.loads(class_js)  # 转化为json    else:        with open(&quot;my_class.json&quot;, &quot;w&quot;) as f:            f.write(&quot;{}&quot;)            js = {}    read_class(weeks)</code></pre><h2 id="时间初始化"><a href="#时间初始化" class="headerlink" title="时间初始化"></a>时间初始化</h2><p>我们要判断当前是第几周。</p><p>首先，我们要知道第一周在什么时候。我们把第一周的时间保存在启动文件的start上面，第一周的开始应该是星期天，如果不是星期天，就更改到星期天。</p><p>然后，我们要算出今天离第一周差了几天，根据天数计算出当前是第几周，保存到week上。</p><p>另外，还需要判断今天是星期几，保存在now_week上</p><pre><code class="python">def time_init():    global weeks, now_week    # 确认开始的日期 年/月/日    init_year = init[&quot;start&quot;][0]    init_mouth = init[&quot;start&quot;][1]    init_day = init[&quot;start&quot;][2]    # 如果开始的一天不是周日，则将开始的日期变为周日    if not datetime.datetime(init_year, init_mouth, init_day).strftime(&quot;%w&quot;) == 0:        init_day -= eval(datetime.datetime(init_year, init_mouth, init_day).strftime(&quot;%w&quot;))    # 初始化的时间    init_date = datetime.datetime(init_year, init_mouth, init_day)    # 现在的时间    now_date = datetime.datetime.today()    # 间隔的天数    days = (now_date - init_date).days    # 间隔的周数，第一周为1    weeks = int(days / 7) + 1    # 框出今天星期几    now_week = eval(now_date.strftime(&quot;%w&quot;))time_init()weekday = [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;]</code></pre><h2 id="绘制课程表的核心"><a href="#绘制课程表的核心" class="headerlink" title="绘制课程表的核心"></a>绘制课程表的核心</h2><h3 id="创建主窗体"><a href="#创建主窗体" class="headerlink" title="创建主窗体"></a>创建主窗体</h3><p>创建一个窗体，窗体由几部分构成，分别是课程表的框架还有一些功能的按钮。</p><pre><code class="python">top = tkinter.Tk()  # 创建一个窗体top.geometry(&quot;1100x650+200+50&quot;)  # 改变窗体的大小top.title(&#39;课程表&#39;)top.resizable(0, 0)# 框架box = tkinter.LabelFrame(top, text=&quot;课程表&quot;, background=&quot;#F8F8FF&quot;, height=600, width=1100)box.pack()set = tkinter.LabelFrame(top, text=&quot;管理&quot;, height=100, width=1100)set.pack()label_now_week = tkinter.Label(set, text=&quot;现在是第{}周，当前的周数为&quot;.format(weeks))label_now_week.pack(side=tkinter.LEFT)week = tkinter.Variable()week.set(weeks)entry = tkinter.Entry(set, textvariable=week, width=10)entry.pack(side=tkinter.LEFT)last = tkinter.Button(set, text=&quot;跳转&quot;, command=jump)last.pack(side=tkinter.LEFT)# 上下周按钮last = tkinter.Button(set, text=&quot;上一周&quot;, command=last_week)next = tkinter.Button(set, text=&quot;下一周&quot;, command=next_week)last.pack(side=tkinter.LEFT)next.pack(side=tkinter.LEFT)# 数据控制按钮chang_button = tkinter.Button(set, text=&quot;导入数据&quot;, command=data_change)chang_button.pack(side=tkinter.LEFT)# 数据控制按钮command_button = tkinter.Button(set, text=&quot;管理课程&quot;, command=command)command_button.pack(side=tkinter.LEFT)# 刷新time_button = tkinter.Button(set, text=&quot;管理起始周-上课时间&quot;, command=set_time)time_button.pack(side=tkinter.LEFT)# 刷新flesh_button = tkinter.Button(set, text=&quot;刷新&quot;, command=flesh)flesh_button.pack(side=tkinter.LEFT)# 关于about_button = tkinter.Button(set, text=&quot;关于&quot;, command=about)about_button.pack(side=tkinter.LEFT)</code></pre><p>实现的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200312204000237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt=""></p><h3 id="绘制课程小格子"><a href="#绘制课程小格子" class="headerlink" title="绘制课程小格子"></a>绘制课程小格子</h3><p>接下来让我们显示，这个功能是根据当前是第几周来显示课程，如果是现在周就显示现在的课程，如果是点了上一周下一周就显示该周课程。</p><p>这个函数主要用于判断课程是否是当前周的课程。</p><p>在点击上一周下一周后，该函数会被用到，所以要先删去课程表上之前周的课程。</p><p>如果课程是单周课程（数据包含单字），需要判断现在是否是单周，双周同理。</p><pre><code class="python">def read_class(_week):    for widget in box.winfo_children():        widget.destroy()    draw_week()    for c in js:        name = c        for i in js[c][&#39;subject&#39;]:            _week = i[&quot;week&quot;]            # 判断课程是否是单双周的课程            if &quot;单&quot; in _week:                _week = _week.replace(&quot;周(单)&quot;, &quot;&quot;)                _week = _week.split(&quot;-&quot;)                # 开始周/结束周                start_week, end_week = eval(_week[0]), eval(_week[-1])                if weeks % 2 == 1:  # 判断是否是单周                    if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                        if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                            # 根据节来优化显示效果                            draw_box(name, i)            elif &quot;双&quot; in _week:                _week = _week.replace(&quot;周(双)&quot;, &quot;&quot;)                _week = _week.split(&quot;-&quot;)                # 开始周/结束周                start_week, end_week = eval(_week[0]), eval(_week[-1])                if weeks % 2 == 0:  # 判断是否是双周                    if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                        if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                            draw_box(name, i)            else:                _week = _week.replace(&quot;周&quot;, &quot;&quot;)                _week = _week.split(&quot;-&quot;)                # 开始周/结束周                start_week, end_week = eval(_week[0]), eval(_week[-1])                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                    # 根据节来优化显示效果                    draw_box(name, i)</code></pre><p>如果确实是单周课程，就进行绘制。</p><pre><code class="python">def draw_box(courses, course):    scr = &quot;{}\n讲师 {}\n周 {}\n地点 {}&quot;.format(        courses, course[&quot;teacher&quot;], course[&quot;week&quot;], course[&quot;address&quot;])  # 要显示的课程信息    part = course[&quot;part&quot;]    part = part.split(&quot;-&quot;)    start_part, end_part = eval(part[0]), eval(part[-1])    # 确认文本的位置    x = weekday.index(course[&quot;weekday&quot;])    # 创建一个文本控件    text = tkinter.Label(box, text=scr, width=20, fg=&quot;#FFFFFF&quot;, bg=js[courses][&#39;color&#39;],                         height=2 * (end_part - start_part + 1))    text.place(x=x * 150 + 40, y=start_part * 40 + 20)  # 在屏幕上放置文本控件</code></pre><p>绘制效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200312204101799.png" srcset="/img/loading.gif" alt=""></p><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><h3 id="上下周"><a href="#上下周" class="headerlink" title="上下周"></a>上下周</h3><p>两个函数用于显示上下周，与两个按钮绑定。</p><p>上一周时，如果周数为1，就禁止上一周的按钮操作。</p><pre><code class="python">def next_week():    global weeks    weeks += 1    read_class(weeks)    week.set(weeks)def last_week():    global weeks    if weeks &gt; 1:        weeks -= 1        read_class(weeks)        week.set(weeks)</code></pre><h3 id="跳转周"><a href="#跳转周" class="headerlink" title="跳转周"></a>跳转周</h3><p>上下周按了太多了？直接输入数字快速跳转周吧。</p><p>需要判断输入的是否是数字，如果不是数字就判断为无效输入。</p><pre><code class="python"># 跳转def jump():    global weeks    if entry.get().isnumeric():        weeks = eval(entry.get())        read_class(weeks)        week.set(weeks)    else:        week.set(weeks)</code></pre><p>##　得到一个彩色</p><p>tkinter用的是两位十六进制保存红、绿、蓝颜色的数据。不同数值混合得到的颜色不同。结果前面需要加个“#”。我们只取中间色，在5到B之间取。最后返回一个类似“#AAAAAA”的数据。</p><pre><code class="python">def get_a_color():    # 多彩效果    text = &quot;56789AB&quot;    color = &quot;#&quot;    for i in range(6):        index = randint(0, len(text) - 1)        color = color + text[index]    return color</code></pre><h3 id="管理课程-1"><a href="#管理课程-1" class="headerlink" title="管理课程"></a>管理课程</h3><p>我们对课程数据的管理有获取、增加、删除、保存的操作。</p><p>用列表保存课程名，如果获取之后可以修改。</p><p>增加课程时，随机获取一种颜色，保存到数据中。</p><p>上面两个，都需要用户按下保存时才进行保存。</p><p>删除时，直接删除课程。</p><pre><code class="python"># 管理课程def command():    def get_info():        data = js[list.get(tkinter.ACTIVE)]        subjects = data[&quot;subject&quot;]        data_information.delete(0.0, tkinter.END)        data_information.insert(0.0, &quot;{} {}\n&quot;.format(list.get(tkinter.ACTIVE), data[&quot;color&quot;]))        for subject in subjects:            if len(subject[&quot;teacher&quot;]) &gt; 7:                teacher = subject[&quot;teacher&quot;][0:7] + &quot;等&quot;            else:                teacher = subject[&quot;teacher&quot;]            scr = &quot;{} {} {} {} {}\n&quot;. \                format(teacher, subject[&quot;week&quot;], subject[&quot;weekday&quot;], subject[&quot;address&quot;], subject[&quot;part&quot;])            data_information.insert(tkinter.INSERT, scr)    def new():        data_information.delete(0.0, tkinter.END)        data_information.insert(0.0, &quot;课程名 {}\n教师 1-20周(单) 星期一 地点 1-12&quot;.format(get_a_color()))    def save():        scr = data_information.get(0.0, tkinter.END)        scr = scr.split(&quot;\n&quot;)        name = scr[0]        subject = []        for i in scr[1:-1]:            if i == &quot;&quot;:                pass            else:                i = i.split(&quot; &quot;)                subject.append({&quot;teacher&quot;: i[0], &quot;week&quot;: i[1], &quot;weekday&quot;: i[2], &quot;address&quot;: i[3], &quot;part&quot;: i[4]})        class_key = scr[0].split(&quot; &quot;)        js[class_key[0]] = {&quot;color&quot;: class_key[1], &quot;subject&quot;: subject}        with open(&quot;my_class.json&quot;, &quot;w&quot;) as f:            json.dump(js, f)        myself_flesh()    def delete():        js.pop(list.get(tkinter.ACTIVE))        with open(&quot;my_class.json&quot;, &quot;w&quot;) as f:            json.dump(js, f)            myself_flesh()    def myself_flesh():        list.delete(0, tkinter.END)        n = 0        for i in js:            list.insert(n, i)            n += 1        list.pack(side=tkinter.LEFT)    command_win = tkinter.Tk()  # 创建一个窗体    command_win.geometry(&quot;500x200+200+50&quot;)  # 改变窗体的大小    command_win.title(&#39;管理数据&#39;)    command_win.resizable(0, 0)    list = tkinter.Listbox(command_win)    n = 0    for i in js:        list.insert(n, i)        n += 1    list.pack(side=tkinter.LEFT)    data_frame = tkinter.LabelFrame(command_win, text=&quot;数据详情&quot;)    data_frame.pack(side=tkinter.LEFT)    button_frame = tkinter.Frame(data_frame)    button_get = tkinter.Button(button_frame, text=&quot;获取&quot;, command=get_info)    button_get.pack(side=tkinter.LEFT)    button_new = tkinter.Button(button_frame, text=&quot;新增&quot;, command=new)    button_new.pack(side=tkinter.LEFT)    button_save = tkinter.Button(button_frame, text=&quot;保存&quot;, command=save)    button_save.pack(side=tkinter.LEFT)    button_del = tkinter.Button(button_frame, text=&quot;删除&quot;, command=delete)    button_del.pack(side=tkinter.LEFT)    button_frame.pack()    data_information = tkinter.Text(data_frame)    data_information.pack()</code></pre><p>实现的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200312204144542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt=""></p><h3 id="设置周"><a href="#设置周" class="headerlink" title="设置周"></a>设置周</h3><p>用户可以直接输入起始周，也可以更改时间。</p><pre><code class="python">def set_time():    def save():        # 判断是否有效日期        try:            datetime.datetime.strptime(start_time.get(), &quot;%Y-%m-%d&quot;)            split_time = start_time.get().split(&quot;-&quot;)            split_time = [eval(split_time[0]), eval(split_time[1]), eval(split_time[2])]            init[&quot;start&quot;] = split_time        except Exception:            start_time.delete(0, tkinter.END)            start_time.insert(0, &quot;{}-{}-{}&quot;.format(init_year, init_mouth, init_day))        # 修改课程时间        part = text.get(0.0, tkinter.END).split(&quot;\n&quot;)        dic = {}        n = 0        for little_part in part:            if little_part == &quot;&quot;:                pass            else:                n += 1                dic[str(n)] = little_part        init[&quot;time&quot;] = dic        # 保存数据        with open(&quot;data.json&quot;, &quot;w&quot;) as f:            json.dump(init, f)    set_time_win = tkinter.Tk()  # 创建一个窗体    set_time_win.geometry(&quot;250x200+200+50&quot;)  # 改变窗体的大小    set_time_win.title(&#39;关于软件&#39;)    set_time_win.resizable(0, 0)    init_year = init[&quot;start&quot;][0]    init_mouth = init[&quot;start&quot;][1]    init_day = init[&quot;start&quot;][2]    frame = tkinter.Frame(set_time_win)    frame.pack()    label = tkinter.Label(frame, text=&quot;起始周的时间&quot;)    label.pack(side=tkinter.LEFT)    start_time = tkinter.Entry(frame)    start_time.insert(0, &quot;{}-{}-{}&quot;.format(init_year, init_mouth, init_day))    start_time.pack()    times = tkinter.LabelFrame(set_time_win, text=&quot;每节课的时间&quot;)    times.pack(side=tkinter.LEFT)    text = tkinter.Text(times, width=25, height=10)    dic = init[&quot;time&quot;]    for i in dic:        text.insert(tkinter.END, dic[i] + &quot;\n&quot;)    text.pack()    print(dic)    button_save = tkinter.Button(set_time_win, text=&quot;保存&quot;, command=save)    button_save.pack(side=tkinter.RIGHT)</code></pre><p>实现的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200312204214726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt=""></p><h3 id="转换数据"><a href="#转换数据" class="headerlink" title="转换数据"></a>转换数据</h3><p>参照我的上一篇博客，从教务处导入数据，并把转换的结果显示在窗口的右边。</p><pre><code class="python"># 改变def data_change():    change_win = tkinter.Tk()  # 创建一个窗体    change_win.geometry(&quot;500x265+200+50&quot;)  # 改变窗体的大小    change_win.title(&#39;导入数据&#39;)    change_win.resizable(0, 0)    data_change.origin = tkinter.Text(change_win, height=20, width=30)    data_change.origin.pack(side=tkinter.LEFT)    frame_button = tkinter.Frame(change_win, height=300, width=100)    frame_button.pack(side=tkinter.LEFT)    data_change.translate = tkinter.Text(change_win, height=20, width=30)    data_change.translate.pack(side=tkinter.LEFT)    button_translate = tkinter.Button(frame_button, text=&quot;转换并保存&quot;, command=write)    button_translate.pack(side=tkinter.TOP)    change_win.mainloop()</code></pre><p>然后要写入数据，</p><pre><code class="python">def write():    key = init[&quot;book&quot;]    text = json.loads(data_change.origin.get(0.0, tkinter.END))  # 转化为json    data = {}    # 抽象化读取字典    for i in init[&quot;local&quot;]:        text = text[i]    for course in text:        class_data = {}        print(course[key[&quot;name&quot;]])        if course[key[&quot;name&quot;]] in data:            subject = data[course[key[&quot;name&quot;]]][&quot;subject&quot;]            print(course[key[&quot;name&quot;]])        else:            subject = []        subject.append({&quot;teacher&quot;: course[key[&quot;teacher&quot;]], &quot;week&quot;: course[key[&quot;week&quot;]],                        &quot;weekday&quot;: course[key[&quot;weekday&quot;]],                        &quot;address&quot;: course[key[&quot;address&quot;]], &quot;part&quot;: course[key[&quot;part&quot;]]})        class_data[&quot;color&quot;] = get_a_color()        class_data[&quot;subject&quot;] = subject        data[course[key[&quot;name&quot;]]] = class_data    with open(&quot;my_class.json&quot;, &quot;w&quot;) as f:        json.dump(data, f)    data_change.translate.insert(0.0, data)</code></pre><p>实现的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200312204251565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
      <tag>课程表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VB字符串处理</title>
    <link href="/2020/03/08/VBString/"/>
    <url>/2020/03/08/VBString/</url>
    
    <content type="html"><![CDATA[<h1 id="基本处理"><a href="#基本处理" class="headerlink" title="基本处理"></a>基本处理</h1><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>选择比较模式</p><pre><code class="vb">Option Compare [模式]</code></pre><p>比较模式有两种可选</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>Binary</td><td>根据Ascii码，二进制比较</td></tr><tr><td>Text</td><td>文字比较，不区分大小写,A&lt;…&lt;Z</td></tr></tbody></table><h2 id="计算长度"><a href="#计算长度" class="headerlink" title="计算长度"></a>计算长度</h2><pre><code class="vb">Len([字符串])</code></pre><h2 id="寻找子串的位置"><a href="#寻找子串的位置" class="headerlink" title="寻找子串的位置"></a>寻找子串的位置</h2><p>与Python不同的是，VB的索引是从1开始的，既第一个字符为1，第二个字符为2以此类推。</p><pre><code class="vb">InStr([起始位置], [字符串], [子串])&#39;或者可以简写InStr([字符串], [子串])</code></pre><h2 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h2><pre><code class="vb">Split([字符串], [拆分根据的字符], [返回字符的个数], [比较方式])</code></pre><p>简单的可以</p><pre><code class="vb">Split([字符串], [拆分根据的字符])</code></pre><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片会返回字符串特点位置的值。</p><pre><code class="vb">Mid([字符串], [起始索引], [结束索引])&#39; 单个字符的切片Mid([字符串], [位置])</code></pre><h2 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h2><pre><code class="vb">Replace([字符串], [旧字符], [新字符])</code></pre><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><pre><code class="vb">Ucase([字符串]) &#39;转换成大写Lcase([字符串]) &#39;转换成小写</code></pre><h1 id="生成字符串"><a href="#生成字符串" class="headerlink" title="生成字符串"></a>生成字符串</h1><h2 id="生成重复字符串"><a href="#生成重复字符串" class="headerlink" title="生成重复字符串"></a>生成重复字符串</h2><h3 id="单个字符的重复"><a href="#单个字符的重复" class="headerlink" title="单个字符的重复"></a>单个字符的重复</h3><p>把索引为1的字符重复n次</p><pre><code class="vb">String([重复次数], [字符])</code></pre><h3 id="空格的重复"><a href="#空格的重复" class="headerlink" title="空格的重复"></a>空格的重复</h3><p>返回n个空格</p><pre><code class="vb">Space([个数])</code></pre><h1 id="格式处理"><a href="#格式处理" class="headerlink" title="格式处理"></a>格式处理</h1><h2 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h2><h3 id="去除开头的空格"><a href="#去除开头的空格" class="headerlink" title="去除开头的空格"></a>去除开头的空格</h3><pre><code class="vb">Ltrim([字符串])</code></pre><h3 id="去除结尾的空格"><a href="#去除结尾的空格" class="headerlink" title="去除结尾的空格"></a>去除结尾的空格</h3><pre><code class="vb">Rtrim([字符串])</code></pre><h3 id="去除开头、结尾的空格"><a href="#去除开头、结尾的空格" class="headerlink" title="去除开头、结尾的空格"></a>去除开头、结尾的空格</h3><pre><code>Trim([字符串])</code></pre><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><pre><code class="vb">Format ([原字符串], &quot;[格式化字符串]&quot;)</code></pre><table><thead><tr><th>格式化字符串</th><th>作用</th></tr></thead><tbody><tr><td>General Number</td><td>普通数字</td></tr><tr><td>Fixed</td><td>带两位小数</td></tr><tr><td>Standard</td><td>带千位分隔号和两位小数</td></tr><tr><td>%</td><td>化为百分数</td></tr><tr><td>Percent</td><td>百分数</td></tr><tr><td>Scientific</td><td>科学记数法</td></tr><tr><td>Yes/No</td><td>布尔值</td></tr><tr><td>On/Off</td><td>布尔值，返回为On或者Off</td></tr><tr><td>######</td><td>同0是占位符，位数不足时填充</td></tr><tr><td>0000000</td><td></td></tr><tr><td>.</td><td>显示小数点</td></tr><tr><td>，</td><td>不足一千化为0</td></tr><tr><td>Currency</td><td>货币</td></tr><tr><td>\</td><td>不转义符</td></tr><tr><td>General Date</td><td>基本类型</td></tr><tr><td>Long Date</td><td>长日期</td></tr><tr><td>Medium Date</td><td>中日期</td></tr><tr><td>Short Date</td><td>短日期</td></tr><tr><td>Long Time</td><td>长时间</td></tr><tr><td>Medium Time</td><td>中时间</td></tr><tr><td>Short Time</td><td>短时间</td></tr><tr><td>yyyy:mm:dd:hh:mm:ss</td><td>自定义格式，年月日时分秒</td></tr><tr><td>y</td><td>年中的第几天</td></tr><tr><td>d</td><td>月中的第几天</td></tr><tr><td>ddd</td><td>周几</td></tr><tr><td>dddd</td><td>星期几</td></tr><tr><td>mmm</td><td>月份</td></tr><tr><td>q</td><td>季节</td></tr><tr><td>A/P</td><td>早上下午，下同</td></tr><tr><td>AMPM</td><td></td></tr></tbody></table><h1 id="不同格式转换"><a href="#不同格式转换" class="headerlink" title="不同格式转换"></a>不同格式转换</h1><h2 id="半角、全角转换"><a href="#半角、全角转换" class="headerlink" title="半角、全角转换"></a>半角、全角转换</h2><pre><code class="vb">Stronv([字符串], [模式])</code></pre><p>模式有两种选择：</p><table><thead><tr><th><code>vbwide</code></th><th><code>vbnarrow</code></th></tr></thead><tbody><tr><td>半角转全角</td><td>全角转半角</td></tr></tbody></table><h2 id="转换成ASCII编码"><a href="#转换成ASCII编码" class="headerlink" title="转换成ASCII编码"></a>转换成ASCII编码</h2><pre><code class="vb">Asc([字符])</code></pre><h2 id="ASCII编码转文字"><a href="#ASCII编码转文字" class="headerlink" title="ASCII编码转文字"></a>ASCII编码转文字</h2><p>vb没有转义符，所以可以通过ASCII替代转义符。</p><pre><code class="vb">Chr([ASCii编码])</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>VBA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VB数据进阶与运算符</title>
    <link href="/2020/03/08/VBdata/"/>
    <url>/2020/03/08/VBdata/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型扩展"><a href="#数据类型扩展" class="headerlink" title="数据类型扩展"></a>数据类型扩展</h1><h2 id="额外的数据类型"><a href="#额外的数据类型" class="headerlink" title="额外的数据类型"></a>额外的数据类型</h2><table><thead><tr><th>符号</th><th>类型</th></tr></thead><tbody><tr><td>Byte</td><td>字节</td></tr><tr><td>Date</td><td>日期</td></tr><tr><td>Currency</td><td>货币</td></tr><tr><td>Variant</td><td>变体</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><table><thead><tr><th>函数</th><th>类型</th></tr></thead><tbody><tr><td>CByte()</td><td>字节</td></tr><tr><td>CBool()</td><td>布尔类型</td></tr><tr><td>CInt()</td><td>整数</td></tr><tr><td>CLng()</td><td>长整数</td></tr><tr><td>CSng()</td><td>浮点数</td></tr><tr><td>CDbl()</td><td>双精度浮点数</td></tr><tr><td>CCur()</td><td>货币</td></tr><tr><td>CDec()</td><td>文本转数值</td></tr><tr><td>CDate()</td><td>日期</td></tr><tr><td>CStr()</td><td>字符串</td></tr><tr><td>Cvar()</td><td>变体</td></tr></tbody></table><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>^</td><td>幂次方</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>小数除</td></tr><tr><td>\</td><td>整数除</td></tr><tr><td>Mod</td><td>取余</td></tr><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>=</td><td>等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>Not</td><td>非</td></tr><tr><td>And</td><td>与</td></tr><tr><td>Or</td><td>或</td></tr><tr><td>Xor</td><td>异或</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>VBA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VB控制语句</title>
    <link href="/2020/03/06/vb%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2020/03/06/vb%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>单层条件语句</p><pre><code class="vb">If [条件] Then [语句1] Else [语句2]</code></pre><p>多层条件语句</p><pre><code class="vb">If [条件] Then    [语句]ElseIf [条件] Then    [语句]...Else    [语句]End If</code></pre><p>Case语句</p><pre><code class="vb">Select Case [条件]Case [条件]    [语句]...Case Else    [语句]End Select</code></pre><p>三元表达式</p><pre><code class="vb">IIf([条件], [语句1], [语句2])</code></pre><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h2><pre><code class="vb">For [循环变量] = [初值] to [终值] Step [步长][语句]Next</code></pre><h2 id="While-Until循环"><a href="#While-Until循环" class="headerlink" title="While/Until循环"></a>While/Until循环</h2><pre><code class="vb">Do While/Until [条件]    [语句]Loop</code></pre><p>或者</p><pre><code class="vb">Do    [语句]Loop While/Until [条件]</code></pre><p>对于While Loop循环，还有可替换的</p><pre><code class="VB">While [条件]    [语句]Wend</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>VBA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>控制语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VB数据与函数</title>
    <link href="/2020/03/05/VB/"/>
    <url>/2020/03/05/VB/</url>
    
    <content type="html"><![CDATA[<p>一开始我以为，已经停更了二十几年的VB已经没有太大用处，在昨天我研究如何在office2016上如何运行flash的时候（flash已经快停止维护了，还用flash做PPT的老师可长点心吧），发现了一个神奇的功能：</p><p><img src="https://s2.ax1x.com/2020/03/05/37LuNQ.md.png" srcset="/img/loading.gif" alt="图像"></p><p>中间的一些功能似曾相识，拖动几个看看</p><img src="https://s2.ax1x.com/2020/03/05/37L5vt.png" srcset="/img/loading.gif" alt="图床" style="zoom:50%;" /><p>咦咦咦？这是要在PPT中跑程序吗？</p><p>双击任意控件，弹出编程窗口：</p><img src="https://s2.ax1x.com/2020/03/05/37OuqK.md.png" srcset="/img/loading.gif" alt="开发" style="zoom: 67%;" /><p>这就是VB没错了。更加准确地说，应该叫VBA，VB宏语言，可以替代人工地一些按键操作，并且在Office套件里面都是支持的。</p><p>这就意味着，使用PPT不仅仅只是页面切换，还可以有一种更加高级的玩法了。比如基于PPT的程序，自动整理数据等……如此方便的东西，还不赶快学起来！</p><p>首先让我们认识下VB的数据</p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>首先我们来认识下VB的数据类型。</p><table><thead><tr><th>类型</th><th>标识符</th><th>简写</th></tr></thead><tbody><tr><td>整数</td><td>Integer</td><td>%</td></tr><tr><td>长整数</td><td>Long</td><td>&amp;</td></tr><tr><td>浮点数Single</td><td>Single</td><td>！</td></tr><tr><td>高精度浮点数</td><td>Double</td><td>#</td></tr><tr><td>字符</td><td>String</td><td></td></tr><tr><td>布尔</td><td>Boolean</td><td></td></tr></tbody></table><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre><code class="vb">Dim [变量名] As [数据类型]</code></pre><p>或者使用简写</p><pre><code class="vb">Dim [变量名][简写]</code></pre><p>或者直接进行赋值</p><pre><code class="vb">[变量名] = [值]</code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><pre><code class="vb">Const [常量名] = [数值]</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><pre><code class="vb">Dim [数组名](数组个数) As [数据类型]</code></pre><p>或者简写为</p><pre><code class="vb">Dim [数组名](数组个数)</code></pre><p>###　指定角标</p><pre><code class="vb">Dim [数组名]([起始值] to [结尾值])</code></pre><h3 id="定义多维数组"><a href="#定义多维数组" class="headerlink" title="定义多维数组"></a>定义多维数组</h3><p>定义个数A×数组个数B×…个数据</p><pre><code class="vb">Dim [数组名](数组个数A, 数组个数B, ...) As [数组类型]</code></pre><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><h3 id="定义自定义类型"><a href="#定义自定义类型" class="headerlink" title="定义自定义类型"></a>定义自定义类型</h3><p>有时我们需要一些别的数据类型，我们可以进行自定义</p><pre><code class="vb">Type [类型名]&lt;子类型&gt; As &lt;数据类型&gt;&lt;子类型&gt; As &lt;数据类型&gt;...End Type</code></pre><h3 id="赋值自定义类型"><a href="#赋值自定义类型" class="headerlink" title="赋值自定义类型"></a>赋值自定义类型</h3><pre><code class="vb">[变量名] As [类型名][变量名].[子类型] = [赋值]</code></pre><p>同时可以使用 With 关键字</p><pre><code class="vb">With [变量名].[子类型] = [赋值]End With</code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><pre><code class="vb">Private/Public Static Function [函数名]([参数], [参数], [...]) As [数据类型]        [函数语句]        [函数名] = k ‘相反于return返回值End Function</code></pre><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><pre><code class="vb">[对象] = [函数名](参数)</code></pre><p>简单的，也可以</p><pre><code class="vb">[函数名](参数)</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>VBA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宏语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科里奥利力的方向</title>
    <link href="/2020/02/28/coriolis-force/"/>
    <url>/2020/02/28/coriolis-force/</url>
    
    <content type="html"><![CDATA[<h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><h2 id="参考系转动的角速度方向"><a href="#参考系转动的角速度方向" class="headerlink" title="参考系转动的角速度方向"></a>参考系转动的角速度方向</h2><p>根据<strong>右手定则</strong>，从上往下看，四指绕着物体转动方向，拇指指向的方向为角速度的方向。<br>科里奥利力向上：<img src="https://img-blog.csdnimg.cn/20200204123524668.png" srcset="/img/loading.gif" alt="逆时针" style="zoom:50%;" /><br>科里奥利力向下：<img src="https://img-blog.csdnimg.cn/20200204123559303.png" srcset="/img/loading.gif" alt="顺时针" style="zoom:50%;" /></p><h2 id="向量外积"><a href="#向量外积" class="headerlink" title="向量外积"></a>向量外积</h2><p>大小：<strong>a×b</strong> = |a||b|sin&lt;a,b&gt;<strong>=c</strong><br>方向：从向量a绕到向量b形成的轨迹运用<strong>右手定则（同上）</strong>,拇指指向为c的方向。<br><img src="https://img-blog.csdnimg.cn/20200204124150146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="向量外积" style="zoom:50%;" /></p><h2 id="科里奥利力的方向"><a href="#科里奥利力的方向" class="headerlink" title="科里奥利力的方向"></a>科里奥利力的方向</h2><p>根据<strong>F = 2mν×ω</strong><br>科里奥利力的方向由物体的速度指向参考系的角速度，假设上图a是物体相对于非惯性参考系的速度，b是非惯性参考系转动的角速度，c就为科里奥利力的方向。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="地转偏向力"><a href="#地转偏向力" class="headerlink" title="地转偏向力"></a>地转偏向力</h2><p>我们都知道北半球物体运动会向右偏转，南半球物体会向左偏转，如图：<br>红色为地球自转的角速度方向，假设蓝色为物体运动方向，灰色就是科里奥利力的方向。<br><img src="https://img-blog.csdnimg.cn/20200204123151969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="北半球的科里奥利力方向" style="zoom:50%;" /><br>把北半球假象为一个平面，图中的红色指向圆面外，无论蓝色的速度线方向如何，使用右手定则科里奥利力方向一定向右。</p><img src="https://img-blog.csdnimg.cn/20200204132116634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="北半球" style="zoom: 67%;" />相反，对于南半球，科里奥利力的方向虽然与北半球相同，但是对于南半球来说“下面”才是“上面”，所以南半球的科里奥利力方向向左。<img src="https://img-blog.csdnimg.cn/20200204132835735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="南半球" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科里奥利力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类、对象……面向对象编程是啥</title>
    <link href="/2020/02/25/%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E2%80%A6%E2%80%A6%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/02/25/%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E2%80%A6%E2%80%A6%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="类、对象"><a href="#类、对象" class="headerlink" title="类、对象"></a>类、对象</h1><p>什么是面向对象编程，这是初学者往往感到疑惑。想要弄懂什么是面向对象，首先问自己一个问题，你理想的对象长什么样？</p><p>你可能想到很多，比如年轻好看，能歌善舞……当然，你想的不是特定的一个人，而是一类人。</p><p>这类符合你描述的人。这就是 <strong>类</strong> 。</p><p>你理想中的对象是一个类，你对情人有一定的要求，所以类也要有对应的 <strong>属性</strong>和 <strong>方法</strong>。 你要求TA年轻好看，这就是类的属性；你要求TA能歌善舞，这就是类的方法。</p><p>当然，你也可以举例，比如 <em>成果</em> 就是你理想的对象，这就是类的实例化。换句话说，成果就是符合你的类描述中的 <strong>对象</strong>。你可以用类来快速地创建很多个对象。</p><p>当然，随着时间的推移，你的某些观点可能会发生改变，比如在几年后，你的观点改变了一点，你对情人的要求更高了，你希望你理想中的对象会做饭，你可以直接继承你对对象的定义，同时加入一个更高的要求：会做饭，这就是<strong>继承</strong>。</p><p>但是，如果你的要求降低了，但你不想再重新构造一个对象类了怎么办呢？比如把年轻好像改成是个活的，能歌赏舞改成能动，没有问题，你可以在继承类后对一部分内<strong>重写</strong>。</p><h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><p>面向对象的好处都有啥，谁说对了就给他。</p><p>明显，面向对象的好处是可以快速重用代码，你可以根据一个类频繁地创建多个对象而不需要多次进行定义。</p><h1 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h1><p>下面哪个是类哪个是对象呢？用笔勾起来吧：</p><table><thead><tr><th><strong>手机</strong></th><th><strong>三星S10</strong></th></tr></thead><tbody><tr><td><strong>太阳</strong></td><td><strong>恒星</strong></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只用11行代码，轻松画图像</title>
    <link href="/2020/02/25/%E5%8F%AA%E7%94%A811%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BD%BB%E6%9D%BE%E7%94%BB%E5%9B%BE%E5%83%8F/"/>
    <url>/2020/02/25/%E5%8F%AA%E7%94%A811%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BD%BB%E6%9D%BE%E7%94%BB%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p>画图要下载matlab？但我看到19G的下载后，小内存的固态硬盘哭了。</p><p>不想下载matlab？没有关系，用<strong>Python</strong> + <strong>mathlabplot</strong>照样可以画三维图！</p><p>而现在只要11行代码就可以轻松完成函数画图！</p><img src="https://s2.ax1x.com/2020/02/25/3YLxL6.png" srcset="/img/loading.gif" alt="image-20200225125454913" style="zoom:50%;" /><p>很漂亮有没有？！</p><p>画曲面图：</p><pre><code class="python">import matplotlib.pyplot as pltimport numpy as npax = plt.axes(projection=&#39;3d&#39;)def f(x, y):    return (1- x**2 - y**2)**0.5    # 在这里写函数x = np.arange(-1, 1, 0.1)   # 定义域y = np.arange(-1, 1, 0.1)   # 精细程度X, Y = np.meshgrid(x, y)Z = f(X, Y)ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=&#39;viridis&#39;, edgecolor=&#39;none&#39;)plt.show()</code></pre><p>画等高线图：</p><pre><code class="python">import matplotlib.pyplot as pltfrom mpl_toolkits import mplot3dimport numpy as npax = plt.axes(projection=&#39;3d&#39;)def f(x, y):    return (1-x**2 - y**2)**0.5    # 在这里写函数x = np.arange(-1, 1, 0.1)   # 定义域/精细程度y = np.arange(-1, 1, 0.1)X, Y = np.meshgrid(x, y)Z = f(X, Y)ax.contour3D(X, Y, Z, 50, cmap=plt.cm.jet)plt.show()</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>plt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tkinter快速入门</title>
    <link href="/2020/02/21/tkinter-quick/"/>
    <url>/2020/02/21/tkinter-quick/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="Frame框架"><a href="#Frame框架" class="headerlink" title="Frame框架"></a>Frame框架</h1><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td>父组件</td><td>要将组件放置的位置</td></tr></tbody></table><h1 id="Label文本框"><a href="#Label文本框" class="headerlink" title="Label文本框"></a>Label文本框</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td>字符串</td><td>文本</td></tr><tr><td>bg</td><td>字符串</td><td>背景色</td></tr><tr><td>fg</td><td>字符串</td><td>前景色</td></tr><tr><td>font</td><td>([表示字体的字符串]， 大小)</td><td>字体</td></tr><tr><td>width</td><td>数字</td><td>宽度</td></tr><tr><td>height</td><td>数字</td><td>高度</td></tr><tr><td>justify</td><td>“left”, “center”,  “right”</td><td>文本对齐的方式</td></tr></tbody></table><h1 id="Entry单行文本框"><a href="#Entry单行文本框" class="headerlink" title="Entry单行文本框"></a>Entry单行文本框</h1><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>show</td><td>字符</td><td>作为密码时显示的内容</td></tr><tr><td>textvariable</td><td>tkinter.Variable()</td><td>替代文本选项资源</td></tr><tr><td>width</td><td></td><td></td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><pre><code class="python">Entry.get()</code></pre><h3 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h3><pre><code class="python">Text.delete([整数索引1]，[整数索引2])</code></pre><table><thead><tr><th>整数索引</th><th></th></tr></thead><tbody><tr><td>0</td><td>开头</td></tr><tr><td>tkinter.INSERT</td><td>光标</td></tr><tr><td>tkinter.END</td><td>结尾</td></tr></tbody></table><h1 id="Text多行文本框"><a href="#Text多行文本框" class="headerlink" title="Text多行文本框"></a>Text多行文本框</h1><h2 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>width</td><td></td><td></td></tr><tr><td>height</td><td></td><td></td></tr></tbody></table><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><pre><code class="python">Text.insert([浮点数索引]， 文本)</code></pre><table><thead><tr><th>浮点数索引</th><th></th></tr></thead><tbody><tr><td>0.0/1.0</td><td>在开头插入</td></tr><tr><td>tkinter.INSERT</td><td>在光标插入</td></tr><tr><td>tkinter.END/2.0</td><td>在结尾插入</td></tr></tbody></table><h3 id="获取文本-1"><a href="#获取文本-1" class="headerlink" title="获取文本"></a>获取文本</h3><pre><code class="python">Text.get([浮点数索引1]，[浮点数索引2])</code></pre><h3 id="清除文本"><a href="#清除文本" class="headerlink" title="清除文本"></a>清除文本</h3><pre><code class="python">Text.delete([浮点数索引1]，[浮点数索引2])</code></pre><h1 id="Scrollbar滚动条"><a href="#Scrollbar滚动条" class="headerlink" title="Scrollbar滚动条"></a>Scrollbar滚动条</h1><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>在能够向下滚动的部件 如 <em>多行文本框、列表</em>等参数中加入<code>yscrollcommand=scroll.set</code>（同样也有<code>xscrollcommand=scroll.set</code>），即可绑定滚动条。</p><p>然后再把函数</p><p>控件Scrollbar.config(command=[绑定的控件].yview)</p><h1 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td>字符串</td><td>按钮文本</td></tr><tr><td>command</td><td>函数对象（不带括号）</td><td>按下要执行的函数</td></tr><tr><td>width</td><td></td><td></td></tr><tr><td>height</td><td></td><td></td></tr></tbody></table><h1 id="Radiobutton单选框"><a href="#Radiobutton单选框" class="headerlink" title="Radiobutton单选框"></a>Radiobutton单选框</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td></td><td></td></tr><tr><td>value</td><td>整形数字</td><td>排序</td></tr><tr><td>variable</td><td>tkinter.IntVar()</td><td>虚拟变量。绑定同一虚拟变量可以辨别单选框。</td></tr><tr><td>command</td><td></td><td></td></tr></tbody></table><h1 id="Checkbutton多选框"><a href="#Checkbutton多选框" class="headerlink" title="Checkbutton多选框"></a>Checkbutton多选框</h1><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>text</td><td></td><td></td></tr><tr><td>variable</td><td>tkinter.BooleanVar()</td><td>绑定的虚拟变量</td></tr><tr><td>command</td><td></td><td></td></tr></tbody></table><h1 id="Listbox列表"><a href="#Listbox列表" class="headerlink" title="Listbox列表"></a>Listbox列表</h1><h2 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>selectmode</td><td>“single”、”browse”、”multiple”、”extended”</td><td>选择模式。单选，拖动/按动多选，多选，Ctrl/Shift多选</td></tr></tbody></table><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre><code class="python">Listbox().insert([插入的索引]，[插入的文本])</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code class="python">Listbox().delete([索引1]，[索引2])</code></pre><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><pre><code class="python">Listbox().get([索引1]，[索引2])</code></pre><h1 id="Scale拖动条"><a href="#Scale拖动条" class="headerlink" title="Scale拖动条"></a>Scale拖动条</h1><h2 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>from_</td><td>数字</td><td>开始</td></tr><tr><td>to</td><td>数字</td><td>结束</td></tr><tr><td>length</td><td>数字</td><td>长度</td></tr><tr><td>tickinterval</td><td>数字</td><td>刻度间隔</td></tr><tr><td>orient</td><td>tkinter.VERTICAL、tkinter.HORIZONTAL</td><td>竖直、水平</td></tr></tbody></table><h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h2><pre><code class="python">Scale().get()</code></pre><h1 id="Spinbox数字选框"><a href="#Spinbox数字选框" class="headerlink" title="Spinbox数字选框"></a>Spinbox数字选框</h1><h2 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>from_</td><td></td><td></td></tr><tr><td>to</td><td></td><td></td></tr><tr><td>increment</td><td>数字</td><td>间隔</td></tr><tr><td>textvariable</td><td></td><td></td></tr><tr><td>command</td><td></td><td></td></tr></tbody></table><h2 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h2><pre><code class="python">Spinbox().get()</code></pre><h1 id="Menu菜单"><a href="#Menu菜单" class="headerlink" title="Menu菜单"></a>Menu菜单</h1><h2 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr></tbody></table><h2 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h2><h3 id="菜单条"><a href="#菜单条" class="headerlink" title="菜单条"></a>菜单条</h3><pre><code class="python">menubar = tkinter.Menu(win)master.config(menu=menubar)</code></pre><h3 id="菜单项"><a href="#菜单项" class="headerlink" title="菜单项"></a>菜单项</h3><h4 id="添加项头"><a href="#添加项头" class="headerlink" title="添加项头"></a>添加项头</h4><table><thead><tr><th></th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>master</td><td></td><td></td></tr><tr><td>tearoff</td><td>布尔类型</td><td>菜单可否单独显示</td></tr></tbody></table><pre><code class="python">menu = tkinter.Menu(menubar, tearoff=False)menubar.add_cascade(label=[显示的字符串], menu=menu)</code></pre><h4 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h4><pre><code class="python">menu.add_command(label=[显示的字符串], command=[函数])</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用python做个课程表吧（三）</title>
    <link href="/2020/02/21/do-a-class-3/"/>
    <url>/2020/02/21/do-a-class-3/</url>
    
    <content type="html"><![CDATA[<p>实际上两个版本的界面还是不能让人满意，接下来我们来用<strong>pygame</strong>来为课程表优化界面吧。</p><p>[toc]</p><h1 id="保存课程表数据"><a href="#保存课程表数据" class="headerlink" title="保存课程表数据"></a>保存课程表数据</h1><p>我们把数据保存在外部文件上，方便多次修改于调用。</p><p>用<em>data.json</em>来保存开始的时间，和数据中保存数据中保存名字、周等的键名。</p><pre><code class="json">{  &quot;start&quot;: [2020, 2, 20],  &quot;book&quot;: {    &quot;name&quot;:&quot;kcmc&quot;,    &quot;teacher&quot;:&quot;xm&quot;,    &quot;week&quot;: &quot;zcd&quot;,    &quot;part&quot;: &quot;jcor&quot;,    &quot;weekday&quot;: &quot;xqjmc&quot;,    &quot;address&quot;: &quot;cdmc&quot;}}</code></pre><p>用<em>class.json</em>保存课程数据，这样在不同的更新课表后不用修改代码直接修改课程文件即可。</p><p>然后打开这两个文件，并转化为json。</p><pre><code class="python"># 用外部文件来保存键值对with open(&quot;data.json&quot;, &quot;r&quot;) as f:    init = json.loads(f.read())# 保存课程数据with open(&quot;class.json&quot;, &quot;rb&quot;) as f:    class_js = f.read()    js = json.loads(class_js)  # 转化为json</code></pre><h1 id="绘制课程表"><a href="#绘制课程表" class="headerlink" title="绘制课程表"></a>绘制课程表</h1><h2 id="初始化窗口"><a href="#初始化窗口" class="headerlink" title="初始化窗口"></a>初始化窗口</h2><p>定义一个970*720的窗口大小，将屏幕填充为白色。设置标题为课程表。</p><pre><code class="python">pygame.init()screen = pygame.display.set_mode([970, 720])screen.fill([255, 255, 255])pygame.display.set_caption(&quot;课程表&quot;)</code></pre><h2 id="绘制课程表的背景"><a href="#绘制课程表的背景" class="headerlink" title="绘制课程表的背景"></a>绘制课程表的背景</h2><p>课程表的背景有</p><ol><li><p>一条条颜色渐变的方块（区分不同节课）</p></li><li><p>一块显示当前星期几的方块</p></li><li><p>在最上面显示星期</p></li></ol><pre><code class="python">def c_box(week):    for i in range(18):        pygame.draw.rect(screen, [255-15*i, 255, 170+5*i], [0, 45 + 45 * (i-1), 1080, 45], 0)    # 显示当前星期几    surface = pygame.Surface((135, 720))    surface.fill([240, 240, 200])    surface.set_alpha(150)    screen.blit(surface, ((week - 1) * 130 + 50, 0))    # 设置字体    my_font = pygame.font.SysFont(&quot;microsoftyaheimicrosoftyaheiui&quot;, 30)    weekday = [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;]    for i in range(7):        text = my_font.render(weekday[i], True, [100, 200, 255], [255, 255, 255])        text.set_colorkey([255, 255, 255]) # 透明化        screen.blit(text, (130*i + 75, 5))</code></pre><p>显示的结果为：</p><img src="C:\Users\ruanq\AppData\Roaming\Typora\typora-user-images\image-20200221101415386.png" srcset="/img/loading.gif" style="zoom: 50%;" /><h2 id="绘制课程表小格子"><a href="#绘制课程表小格子" class="headerlink" title="绘制课程表小格子"></a>绘制课程表小格子</h2><h3 id="定义课程格子类"><a href="#定义课程格子类" class="headerlink" title="定义课程格子类"></a>定义课程格子类</h3><p>课程的小格子根据课程时间长短确认</p><p>定义一个课程格子类</p><p>其中输入为：</p><ol><li>要显示的课程信息</li><li>课程在星期几上课</li><li>课程开始的节数</li><li>课程结束的节数</li></ol><p>课程格子的颜色随机，文本根据换行符排列。</p><p>最后用一个精灵组来保存每个课程格子。</p><pre><code class="python"># 课程表里的每个格子class Class_list(pygame.sprite.Sprite):    def __init__(self, text, weekday, start, end):        # 继承        super().__init__()        # 分割文本        self.text = text.split(&quot;\n&quot;)        self.weekday = weekday        # 设置控件的大小        self.image = pygame.Surface((125, 80*(end-start)))        self.r, self.g, self.b = random.randint(0, 254), random.randint(0, 254), random.randint(0, 254)        self.image.fill([self.r, self.g, self.b])        self.image.set_alpha(200) # 透明化        # 设置控件的位置        self.rect = pygame.Rect((130*weekday + 55, 45*start), self.image.get_size())        # 绘制字体        self.font()    def font(self):        # 定义一个字体        my_font = pygame.font.SysFont(&quot;microsoftyaheimicrosoftyaheiui&quot;, 15)        # 如果背景为浅色则前景为深色        if 0.21 * self.r + 0.72 * self.g + 0.07 * self.b &gt; 200:            color = [0, 0, 0]        else:            color = [255, 255, 255]        n = 0        # 每行打印一句话        for i in self.text:            text = my_font.render(i, True, color, [self.r, self.g, self.b])            self.image.blit(text, (0, n*20))            n += 1class_box = pygame.sprite.Group()</code></pre><h3 id="判断课程是否符合条件"><a href="#判断课程是否符合条件" class="headerlink" title="判断课程是否符合条件"></a>判断课程是否符合条件</h3><p>同上一篇博客。</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;{}\n讲师 {}\n周 {}\n地点 {}&quot;.format(        course[key[&quot;name&quot;]], course[key[&quot;teacher&quot;]], course[key[&quot;week&quot;]], course[key[&quot;address&quot;]])    week = course[key[&quot;week&quot;]]    # 判断课程是否是单双周的课程    if &quot;单&quot; in week:        week = week.replace(&quot;周(单)&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if weeks % 2 == 1: # 判断是否是单周            if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                    # 根据节来优化显示效果                    read_class(course, key)</code></pre><h3 id="绘制小格子"><a href="#绘制小格子" class="headerlink" title="绘制小格子"></a>绘制小格子</h3><p>如果判断正确，就绘制课程小格子。输入的内容为课程的数据。</p><pre><code class="python">def read_class(course):    scr = &quot;{}\n讲师 {}\n周 {}\n地点 {}&quot;.format(        course[key[&quot;name&quot;]], course[key[&quot;teacher&quot;]], course[key[&quot;week&quot;]], course[key[&quot;address&quot;]]) # 要显示的课程信息    part = course[key[&quot;part&quot;]]    part = part.split(&quot;-&quot;)    start_part, end_part = eval(part[0]), eval(part[-1])    # 确认文本的位置    x = weekday.index(course[key[&quot;weekday&quot;]])    li = Class_list(scr, x, start_part, end_part)    class_box.add(li)</code></pre><h1 id="绘制屏幕"><a href="#绘制屏幕" class="headerlink" title="绘制屏幕"></a>绘制屏幕</h1><p>把课程格子绘制在屏幕上，最后更新屏幕。</p><pre><code class="python">class_box.draw(screen)pygame.display.update()while True:    for event in pygame.event.get():        if event.type == pygame.QUIT:            # 退出游戏            pygame.quit()            break</code></pre><p>最后的显示效果为：</p><img src="https://img-blog.csdnimg.cn/20200221092754789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述" style="zoom: 50%;" /><p>我们的课程表就做好啦！</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
      <tag>课程表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用python做个课程表吧（二）</title>
    <link href="/2020/02/20/do-a-class-2/"/>
    <url>/2020/02/20/do-a-class-2/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>我们想要根据当前第几周显示课程表。</p><h1 id="确认当前时间"><a href="#确认当前时间" class="headerlink" title="确认当前时间"></a>确认当前时间</h1><h2 id="初始化时间"><a href="#初始化时间" class="headerlink" title="初始化时间"></a>初始化时间</h2><p>首先我们要确认一个学期的开始。我们设置一个日期。如果这个日期是星期天那么他就是一个学期的开始，如果不是，那么就变更这一天到最近的周日。</p><pre><code class="python">import datetime# 确认开始的日期 年/月/日init_year = 2020init_mouth = 2init_day = 20# 如果开始的一天不是周日，则将开始的日期变为周日if not datetime.datetime(init_year, init_mouth, init_day).strftime(&quot;%w&quot;) == 0:    init_day -= eval(datetime.datetime(init_year, init_mouth, init_day).strftime(&quot;%w&quot;))</code></pre><h2 id="计算当前周数"><a href="#计算当前周数" class="headerlink" title="计算当前周数"></a>计算当前周数</h2><p>计算当前日期于初始化时间直接差了多少天，然后除以7取余。结果从一开始，在weeks上面加个1.</p><pre><code class="python"># 初始化的时间init_date = datetime.datetime(init_year, init_mouth, init_day)# 现在的时间now_date = datetime.datetime.today()# 间隔的天数days = (now_date - init_date).days# 间隔的周数，第一周为1weeks = int(days / 7) + 1</code></pre><h1 id="绘制当前周"><a href="#绘制当前周" class="headerlink" title="绘制当前周"></a>绘制当前周</h1><h2 id="判断是否是当前周的课程"><a href="#判断是否是当前周的课程" class="headerlink" title="判断是否是当前周的课程"></a>判断是否是当前周的课程</h2><p>首先我们打印下保存周数据的字符串</p><pre><code class="python">print(course[&quot;zcd&quot;])</code></pre><p>输出结果为</p><img src="https://img-blog.csdnimg.cn/20200220201217939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom: 67%;" /><p>可以看到，有的课程分单双周，所以要分别加以判断。</p><p>具体做法是，</p><ol><li><strong>判断</strong>“单”、“双”是否在字符串里，如果在的话，先<strong>剔除</strong>“周（单）”、“周（双）”，不在的话直接剔除“周”。</li><li>用“-”把字符串<strong>分隔</strong>开，取第一个为<strong>开始周</strong>，最后一个为<strong>结束周</strong>（因为开始周结束周可能是<strong>同一个</strong>！）。判断当前周是否在开始周于结束周之内。</li><li>如果是单双周的话还要判断除以二的余数。</li></ol><pre><code class="python">    week = course[&quot;zcd&quot;]    # 判断课程是否是单双周的课程    if &quot;单&quot; in week:        week = week.replace(&quot;周(单)&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if weeks % 2 == 1: # 判断是否是单周            if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                   [放置文本控件]    elif &quot;双&quot; in week:        week = week.replace(&quot;周(双)&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if weeks % 2 == 0:  # 判断是否是双周            if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程                    [放置文本控件]    else:        week = week.replace(&quot;周&quot;, &quot;&quot;)        week = week.split(&quot;-&quot;)        # 开始周/结束周        start_week, end_week = eval(week[0]), eval(week[-1])        if start_week &lt;= weeks &lt;= end_week:  # 判断该课程是否是当前周的课程            [放置文本控件]</code></pre><p>以上判断都成立后就可以放置文本控件了。</p><h2 id="放置文本控件"><a href="#放置文本控件" class="headerlink" title="放置文本控件"></a>放置文本控件</h2><p>首先我们输出一下保存节数的字符串。</p><pre><code class="python">print(course[&quot;jcor&quot;])</code></pre><p>输出结果为</p><img src="https://img-blog.csdnimg.cn/20200220203144577.png" srcset="/img/loading.gif" style="zoom:67%;" /><p>那么我们就首先根据“-”把文本分隔开，然后取第一个和最后一个的数据，第一个数据确认了这节课所处的位置的y轴（一天的课不可能重叠），然后用星期来确认x轴</p><pre><code class="python">                    # 根据节来优化显示效果                    part = course[&quot;jcor&quot;]                    part = part.split(&quot;-&quot;)                    start_part, end_part = eval(part[0]), eval(part[-1])                    # 确认文本的位置                    x = weekday.index(course[&quot;xqjmc&quot;])                    text = Text(top, width=30, height=3 * (end_part - start_part + 1))  # 创建一个文本控件                    text.place(x=x * 215 + 10, y=start_part * 40 + 20)  # 在屏幕上放置文本控件                    text.insert(INSERT, scr)  # 在控件上放置文本</code></pre><p>最后进入消息循环。</p><pre><code class="python">top.mainloop()  # 进入消息循环</code></pre><p>最后的结果为</p><img src="https://img-blog.csdnimg.cn/20200220203024657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
      <tag>课程表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用python做个课程表吧（一）</title>
    <link href="/2020/02/20/do-a-class-1/"/>
    <url>/2020/02/20/do-a-class-1/</url>
    
    <content type="html"><![CDATA[<p>手机端的课程表种类繁多，但电脑端的课程表种类却很少，也不支持自动导课。既然这样就让我们来造轮子吧。</p><p>[toc]</p><h2 id="获取课程表"><a href="#获取课程表" class="headerlink" title="获取课程表"></a>获取课程表</h2><p>首先我们先去获取课程表。登录教务，点击 <strong>学生课表查询</strong>，进入课表界面，按<strong>F12</strong>，导航到 <strong>Network</strong>，按下 <strong>ctrl</strong>+ <strong>r</strong>刷新界面，界面更新后，下面出现了几个文件，让我们一个个查看。</p><img src="https://img-blog.csdnimg.cn/20200220142854836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113238781" style="zoom:50%;" /><p>接下来点击 <strong>Preview</strong>，当我们找到第三个的时候我们可以发现里面包含了课程名、时间等，正好是我们需要的内容。</p><img src="https://img-blog.csdnimg.cn/20200220142943160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113418598" style="zoom:50%;" /><p>接下来我们用右键选择 <strong>Copy response</strong>，然后这个JSON就保存到我们的粘贴板上了。</p><img src="https://img-blog.csdnimg.cn/20200220143013947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220113524084" style="zoom:50%;" /><h1 id="制作课程表"><a href="#制作课程表" class="headerlink" title="制作课程表"></a>制作课程表</h1><h2 id="读取JSON数据"><a href="#读取JSON数据" class="headerlink" title="读取JSON数据"></a>读取JSON数据</h2><p>接下来我们使用python来制作课程表</p><p>首先导入json包，然后导入刚才粘贴的数据，然后把它打印出来</p><pre><code class="python"># -*- coding:GBK -*-         # 文件编码import jsonclass_js = &#39;&#39;&#39;[复制刚才的粘贴内容在这里]&#39;&#39;&#39;js = json.loads(class_js)  # 转化为jsonprint(js)</code></pre><p>输出结果是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200220143115350.png" srcset="/img/loading.gif" alt="image-20200220114157479"></p><p>结果是我们要的数据</p><h2 id="获取课程"><a href="#获取课程" class="headerlink" title="获取课程"></a>获取课程</h2><p>我们可以看到课程数据保存在<strong>kbList</strong>这个值里，我们只用把这个值下面的数据全部取出来。</p><img src="https://img-blog.csdnimg.cn/20200220143137591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220114520679" style="zoom: 67%;" /><p>他的键值对是这样的</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>kcmc</td><td>课程名</td></tr><tr><td>xm</td><td>讲师</td></tr><tr><td>zcd</td><td>周数</td></tr><tr><td>jcor</td><td>节数</td></tr><tr><td>xqjmc</td><td>星期</td></tr><tr><td>cdmc</td><td>地点</td></tr></tbody></table><p>接下来我们把需要的数据输出一下</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;课程名:\n{}\n讲师:{}\n节:{}\n周:{}&quot;.format(        course[&quot;kcmc&quot;], course[&quot;xm&quot;], course[&quot;zcd&quot;], course[&quot;jcor&quot;])    print(scr)</code></pre><p>打印的结果是这样的：</p><img src="https://img-blog.csdnimg.cn/2020022014315311.png" srcset="/img/loading.gif" alt="image-20200220114817546" style="zoom: 67%;" /><h2 id="格式化课程表"><a href="#格式化课程表" class="headerlink" title="格式化课程表"></a>格式化课程表</h2><p>这样我们就完成了课程表的制作，但这是不完善的。</p><p>比如竖着一排看起来很麻烦，而且找课程也不方便，接下来我们来给课程表添加一个界面。</p><p>我们挑选tkinter来给完成这个界面。</p><h3 id="创建窗体"><a href="#创建窗体" class="headerlink" title="创建窗体"></a>创建窗体</h3><p>首先我们要<strong>导入tkinter</strong>，并<strong>创建一个窗体</strong>。</p><pre><code class="python">from tkinter import *top = Tk()  # 创建一个窗体top.geometry(&quot;1100x400+200+50&quot;) # 改变窗体的大小top.mainloop()  # 进入消息循环</code></pre><p>显示效果为</p><img src="https://img-blog.csdnimg.cn/20200220143210110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="image-20200220135607560" style="zoom:50%;" /><h3 id="显示课程"><a href="#显示课程" class="headerlink" title="显示课程"></a>显示课程</h3><p>我们根据星期几来放置课程，星期一一列星期二一列。</p><p>首先我们要创建一个列表来记录星期的数据，再创建一个字典来保存当前天有几节课。</p><pre><code class="python">week = [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;]y = {}</code></pre><p>接下来我们把为每个课程数据创建一个文本控件，并把文本放在里面。</p><pre><code class="python">for course in js[&quot;kbList&quot;]:    scr = &quot;课程名:\n{}\n讲师:{}\n节:{}\n周:{}&quot;.format(        course[&quot;kcmc&quot;], course[&quot;xm&quot;], course[&quot;zcd&quot;], course[&quot;jcor&quot;])    print(scr)    # 确认文本的位置    x = week.index(course[&quot;xqjmc&quot;])    if course[&quot;xqjmc&quot;] in y:        y[course[&quot;xqjmc&quot;]] = y[course[&quot;xqjmc&quot;]] + 1    else:        y[course[&quot;xqjmc&quot;]] = 0    text = Text(top, width=30, height=5)  # 创建一个文本控件    text.place(x=x * 215 + 10, y=y[course[&quot;xqjmc&quot;]] * 70 + 20)  # 在屏幕上放置文本控件    text.insert(INSERT, scr)  # 在控件上放置文本</code></pre><p>通过x保存星期的天数，并格式化为0~7，用y保存一天有几节课。</p><p>最后进入消息循环：</p><pre><code class="python">top.mainloop()  # 进入消息循环</code></pre><p>运行的结果是：</p><img src="https://img-blog.csdnimg.cn/20200220143231624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211cm9uZ2xlbmdqaW5n,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" style="zoom:50%;" /><p>当然，这样的结果并不能让我们满意。我们希望能够根据当前所在的周数显示课程。而且这个界面也太丑了，还不如直接下载课程来的方便。下面让我们来改进课程表。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tkinter</tag>
      
      <tag>课程表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从OpenCv到照片调色</title>
    <link href="/2020/02/19/%E4%BB%8EOpenCv%E5%88%B0%E7%85%A7%E7%89%87%E8%B0%83%E8%89%B2/"/>
    <url>/2020/02/19/%E4%BB%8EOpenCv%E5%88%B0%E7%85%A7%E7%89%87%E8%B0%83%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCv"><a href="#OpenCv" class="headerlink" title="OpenCv"></a>OpenCv</h1><h3 id="什么是opencv？"><a href="#什么是opencv？" class="headerlink" title="什么是opencv？"></a>什么是opencv？</h3><p>opencv是一个跨平台的计算机视觉库，由一系列函数构成，可以对照片进行一系列操作。</p><h2 id="颜色模型"><a href="#颜色模型" class="headerlink" title="颜色模型"></a>颜色模型</h2><h3 id="RGB模型"><a href="#RGB模型" class="headerlink" title="RGB模型"></a>RGB模型</h3><p>RGB模型是指图片由三个通道 <strong>红色（red）</strong>、 <strong>绿色（green）</strong>、和 <strong>蓝色（blue）</strong>构成</p><p>，每个值从0到255构成，0代表无，255代表最大值，</p><h3 id="CMKY模型"><a href="#CMKY模型" class="headerlink" title="CMKY模型"></a>CMKY模型</h3><h3 id="HSI颜色模型"><a href="#HSI颜色模型" class="headerlink" title="HSI颜色模型"></a>HSI颜色模型</h3>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2020/02/17/Git-command/"/>
    <url>/2020/02/17/Git-command/</url>
    
    <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><pre><code class="bash">git init</code></pre><h3 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h3><pre><code class="bash">git add [文件名]</code></pre><h3 id="提交修改到版本库"><a href="#提交修改到版本库" class="headerlink" title="提交修改到版本库"></a>提交修改到版本库</h3><pre><code class="bash">git commit -m [文本内容]</code></pre><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><pre><code class="bash">git log</code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><pre><code class="bash">git reset --hard HEAD~[版本个数]</code></pre><h3 id="查看操作的内容"><a href="#查看操作的内容" class="headerlink" title="查看操作的内容"></a>查看操作的内容</h3><pre><code class="bash">git reflog</code></pre><h3 id="查看缓存区与工作区的工作状态"><a href="#查看缓存区与工作区的工作状态" class="headerlink" title="查看缓存区与工作区的工作状态"></a>查看缓存区与工作区的工作状态</h3><pre><code class="bash">git status</code></pre><h3 id="丢弃缓存区"><a href="#丢弃缓存区" class="headerlink" title="丢弃缓存区"></a>丢弃缓存区</h3><pre><code class="bash">git checkout -- [文件名]</code></pre><h3 id="删除工作区文件"><a href="#删除工作区文件" class="headerlink" title="删除工作区文件"></a>删除工作区文件</h3><pre><code class="bash">git rm [文件名]</code></pre><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><pre><code class="bash">git branch</code></pre><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><pre><code class="bash">git branch [分支名]</code></pre><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><pre><code class="bash">git switch [分支名]</code></pre><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><pre><code class="bash">git merge [分支名]</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><pre><code class="bash">git branch -d [分支名]</code></pre><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><pre><code class="bash">git tag</code></pre><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><pre><code class="bash">git tag [标签名]</code></pre><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><pre><code class="bash">git tag -d [标签名]</code></pre><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><pre><code class="bash">git remote add origin [Git的ssh地址]</code></pre><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><pre><code class="bash">git push -u origin master</code></pre><h3 id="推送更新到远程仓库"><a href="#推送更新到远程仓库" class="headerlink" title="推送更新到远程仓库"></a>推送更新到远程仓库</h3><pre><code class="bash">git push origin master</code></pre><h3 id="强制推送到远程仓库"><a href="#强制推送到远程仓库" class="headerlink" title="强制推送到远程仓库"></a>强制推送到远程仓库</h3><pre><code class="bash">git push origin master -f</code></pre><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><pre><code class="bash">git remote</code></pre><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><pre><code class="bash">git remote rm [仓库名]</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来搭建属于你的博客吧</title>
    <link href="/2020/02/17/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/"/>
    <url>/2020/02/17/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>要想搭建一个属于自己的博客平台，你需要</p><ul><li>一个Github账号和Gitee账号（搭建免费的服务平台）</li><li>一台电脑（保存你的博客）</li><li>一个图床（保存图片）</li></ul><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>具体安装过程可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></p><h2 id="同步Github"><a href="#同步Github" class="headerlink" title="同步Github"></a>同步Github</h2><p>首先我们要在Github创建一个<strong>仓库</strong>，仓库的名字的格式应该是<strong>你的用户名.github.io</strong>，记下仓库的地址http的地址，然后我们修改 <em>_config.yml</em>文件，在最后一行的改成</p><pre><code class="yaml">deploy:  type: git  repository: [你的仓库地址]  branch: master</code></pre><p>再根据<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">hexo官方文档</a>的指引，增加 <em>.travis.yml</em>文件.</p><p>然后在控制台输入以下命令</p><pre><code class="bash">npm install hexo-deployer-git</code></pre><h2 id="同步码云"><a href="#同步码云" class="headerlink" title="同步码云"></a>同步码云</h2><p>在码云里，新建一个 <strong>仓库</strong>，名字要与你的<strong>用户名</strong>相同<br>点击<strong>管理</strong>，填入<strong>仓库远程地址</strong>，点击<strong>保存</strong> 。</p><p>找到 <strong>服务</strong>，点击 <strong>Gitee Pages</strong>，开启服务。</p><h1 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h1><h2 id="创建一篇新博客"><a href="#创建一篇新博客" class="headerlink" title="创建一篇新博客"></a>创建一篇新博客</h2><p>在Git bash中输入</p><pre><code class="bash">hexo n [文章的标题]</code></pre><p>如果标题中带空格则需要用英文的双引号括起。</p><p>接着在当前目录下可以找到 <strong>source\_posts</strong> 的有个 <strong>[标题].md</strong>的文件，可以用记事本直接进入修改。</p><p>在文件的前几行有这样几条数据</p><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>title</td><td>[标题]</td></tr><tr><td>date</td><td>[发布的日期]</td></tr><tr><td>tags</td><td>标签，多标签请用<code>[标签1,标签2]</code></td></tr><tr><td>categories</td><td>分类</td></tr></tbody></table><p>修改对应的值即可更改文章信息</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>markdown是为了让用户更关注于写作本身而不是排版的一种轻量级的语言。</p><p>举个例子</p><pre><code class="markdown"># 一级标题## 二级标题### 三级标题</code></pre><p>比较好用的编辑器是 <strong>Typora</strong>， <strong>VScode</strong>也可以进行编辑。</p><p>markdown具体语法可以参考<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>。</p><p>一般图片保存应该保存在图床上，因为Gitee免费仓库的存储空间只有500M，而且访问速度也不快。</p><p>我们可以使用免费的 <strong>路过图床</strong>。</p><h2 id="更新博客到网页上"><a href="#更新博客到网页上" class="headerlink" title="更新博客到网页上"></a>更新博客到网页上</h2><p>在git bash输入</p><pre><code class="bash">hexo g -d</code></pre><p>就可以把博客更新的内容上传到Github上，接着我们登录码云，点击<strong>强制同步</strong></p><p>就可以更新博客到码云上了。</p><p>更新后，我们可以通过<strong>你的用户名.gitee.io</strong>就可以直接访问你的博客了。</p><p>这样的方式不需要经过码云漫长的部署，在国内的访问速度也更快。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄沙之上，是你的故乡吗</title>
    <link href="/2020/02/16/%E9%BB%84%E6%B2%99%E4%B9%8B%E4%B8%8A%EF%BC%8C%E6%98%AF%E4%BD%A0%E7%9A%84%E6%95%85%E4%B9%A1%E5%90%97/"/>
    <url>/2020/02/16/%E9%BB%84%E6%B2%99%E4%B9%8B%E4%B8%8A%EF%BC%8C%E6%98%AF%E4%BD%A0%E7%9A%84%E6%95%85%E4%B9%A1%E5%90%97/</url>
    
    <content type="html"><![CDATA[<h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>在我小的时候，还是五年级到初二的时候，我喜欢看书。</p><p>从鲁迅的《野草》到《Java从入门到入土》，我看过的书种类很多，那时候不仅喜欢看书，还喜欢买书，所以那时候常常跟三五好友去书城。</p><p>去书城的话难免经过一条路，那条路来来回回走了无数次了。</p><p>在相册翻了好久，能够找到一张那时候拍的照片。</p><p><img src="https://s2.ax1x.com/2020/02/16/3pHMef.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>自从初三后，我就很少去过书城了。到了高中后，每周回一次家后的生活基本上就是打游戏，去书城就更无从谈起了。</p><h1 id="沙面"><a href="#沙面" class="headerlink" title="沙面"></a>沙面</h1><p>在广州，有一个因沙子堆积形成的小岛，上面各种各样国家的建筑，述说着这里发生的历史。</p><p><img src="https://s2.ax1x.com/2020/02/16/3p4idJ.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3phC4I.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/39kGQ0.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/39k3zq.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>看到这里，我难免会想起湛江的那条法式风情街，</p><h1 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h1><p>湛江，她也有一段难忘的历史。</p><p><img src="https://s2.ax1x.com/2020/02/16/3pfiXF.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3phZDg.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3prD00.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3pfmfx.md.jpg" srcset="/img/loading.gif" alt="图片"><br><img src="https://s2.ax1x.com/2020/02/16/3pfzHH.md.jpg" srcset="/img/loading.gif" alt="图片"></p><p>回想现在，我已经很少买书了。</p><p>我怀念那时候的生活。</p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黄沙</tag>
      
      <tag>广州</tag>
      
      <tag>湛江</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
